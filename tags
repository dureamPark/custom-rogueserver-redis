!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/user/duream/custom-rogueserver-redis/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/e7db33bb5/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
AbilityAttr	defs/savedata.go	/^	AbilityAttr     int         `json:"abilityAttr"`$/;"	m	struct:defs.StarterEntry	typeref:typename:int
AchvUnlocks	defs/savedata.go	/^	AchvUnlocks        AchvUnlocks        `json:"achvUnlocks"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:AchvUnlocks
AchvUnlocks	defs/savedata.go	/^type AchvUnlocks map[string]int$/;"	t	package:defs	typeref:typename:map[string]int
AddAccountRecord	db/account.go	/^func AddAccountRecord(uuid []byte, username string, key, salt []byte) error {$/;"	f	package:db	typeref:typename:error
AddAccountSession	db/account.go	/^func AddAccountSession(username string, token []byte) error {$/;"	f	package:db	typeref:typename:error
AddDiscordIdByUUID	db/account.go	/^func AddDiscordIdByUUID(discordId string, uuid []byte) error {$/;"	f	package:db	typeref:typename:error
AddDiscordIdByUsername	db/account.go	/^func AddDiscordIdByUsername(discordId string, username string) error {$/;"	f	package:db	typeref:typename:error
AddGoogleIdByUUID	db/account.go	/^func AddGoogleIdByUUID(googleId string, uuid []byte) error {$/;"	f	package:db	typeref:typename:error
AddGoogleIdByUsername	db/account.go	/^func AddGoogleIdByUsername(googleId string, username string) error {$/;"	f	package:db	typeref:typename:error
AddOrUpdateAccountDailyRun	db/daily.go	/^func AddOrUpdateAccountDailyRun(uuid []byte, score int, wave int) error {$/;"	f	package:db	typeref:typename:error
AdminSearchResponse	db/account.go	/^type AdminSearchResponse struct {$/;"	s	package:db
Arena	defs/savedata.go	/^	Arena                    ArenaData                `json:"arena"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:ArenaData
ArenaData	defs/savedata.go	/^type ArenaData interface{}$/;"	i	package:defs
ArgonKeySize	api/account/common.go	/^	ArgonKeySize  = 32$/;"	c	package:account
ArgonMaxInstances	api/account/common.go	/^	ArgonMaxInstances = runtime.NumCPU()$/;"	v	package:account
ArgonMemory	api/account/common.go	/^	ArgonMemory   = 256 * 1024$/;"	c	package:account
ArgonSaltSize	api/account/common.go	/^	ArgonSaltSize = 16$/;"	c	package:account
ArgonThreads	api/account/common.go	/^	ArgonThreads  = 4$/;"	c	package:account
ArgonTime	api/account/common.go	/^	ArgonTime     = 1$/;"	c	package:account
BattleCount	defs/game.go	/^	BattleCount int `json:"battleCount"`$/;"	m	struct:defs.TitleStats	typeref:typename:int
BattleType	defs/savedata.go	/^	BattleType               BattleType               `json:"battleType"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:BattleType
BattleType	defs/savedata.go	/^	BattleType  BattleType               `json:"battleType"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:BattleType
BattleType	defs/savedata.go	/^type BattleType int$/;"	t	package:defs	typeref:typename:int
CandyCount	defs/savedata.go	/^	CandyCount      int         `json:"candyCount"`$/;"	m	struct:defs.StarterEntry	typeref:typename:int
CaughtAttr	defs/savedata.go	/^	CaughtAttr   interface{} `json:"caughtAttr"` \/\/ integer or string$/;"	m	struct:defs.DexEntry	typeref:typename:interface{}
CaughtCount	defs/savedata.go	/^	CaughtCount  int         `json:"caughtCount"`$/;"	m	struct:defs.DexEntry	typeref:typename:int
ChallengeData	defs/savedata.go	/^type ChallengeData struct {$/;"	s	package:defs
Challenges	defs/savedata.go	/^	Challenges               []ChallengeData          `json:"challenges"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:[]ChallengeData
ChangePW	api/account/changepw.go	/^func ChangePW(uuid []byte, password string) error {$/;"	f	package:account	typeref:typename:error
CheckUsernameExists	db/account.go	/^func CheckUsernameExists(username string) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
ClassicWinCount	defs/savedata.go	/^	ClassicWinCount int         `json:"classicWinCount"`$/;"	m	struct:defs.StarterEntry	typeref:typename:int
Clear	api/savedata/clear.go	/^func Clear(uuid []byte, slot int, seed string, save defs.SessionSaveData) (ClearResponse, error)/;"	f	package:savedata	typeref:typename:(ClearResponse, error)
ClearResponse	api/savedata/clear.go	/^type ClearResponse struct {$/;"	s	package:savedata
ClientSessionId	api/endpoints.go	/^	ClientSessionId string               `json:"clientSessionId"`$/;"	m	struct:api.CombinedSaveData	typeref:typename:string
CombinedSaveData	api/endpoints.go	/^type CombinedSaveData struct {$/;"	s	package:api
Ctx	cache/rediscache.go	/^	Ctx = context.Background()$/;"	v	package:cache
DailyRanking	defs/daily.go	/^type DailyRanking struct {$/;"	s	package:defs
Delete	api/savedata/delete.go	/^func Delete(uuid []byte, datatype, slot int) error {$/;"	f	package:savedata	typeref:typename:error
DeleteSession	api/savedata/session.go	/^func DeleteSession(uuid []byte, slot int) error {$/;"	f	package:savedata	typeref:typename:error
DeleteSessionSaveData	db/savedata.go	/^func DeleteSessionSaveData(uuid []byte, slot int) error {$/;"	f	package:db	typeref:typename:error
DeleteSystem	api/savedata/system.go	/^func DeleteSystem(uuid []byte) error {$/;"	f	package:savedata	typeref:typename:error
DeleteSystemSaveData	db/savedata.go	/^func DeleteSystemSaveData(uuid []byte) error {$/;"	f	package:db	typeref:typename:error
DexData	defs/savedata.go	/^	DexData            DexData            `json:"dexData"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:DexData
DexData	defs/savedata.go	/^type DexData map[int]DexEntry$/;"	t	package:defs	typeref:typename:map[int]DexEntry
DexEntry	defs/savedata.go	/^type DexEntry struct {$/;"	s	package:defs
DiscordCallbackURL	api/account/discord.go	/^	DiscordCallbackURL  string$/;"	v	package:account	typeref:typename:string
DiscordClientID	api/account/discord.go	/^	DiscordClientID     string$/;"	v	package:account	typeref:typename:string
DiscordClientSecret	api/account/discord.go	/^	DiscordClientSecret string$/;"	v	package:account	typeref:typename:string
DiscordGuildID	api/account/discord.go	/^	DiscordGuildID string$/;"	v	package:account	typeref:typename:string
DiscordId	api/account/info.go	/^	DiscordId       string `json:"discordId"`$/;"	m	struct:account.InfoResponse	typeref:typename:string
DiscordId	db/account.go	/^	DiscordId       string `json:"discordId"`$/;"	m	struct:db.AdminSearchResponse	typeref:typename:string
DiscordSession	api/account/discord.go	/^	DiscordSession *discordgo.Session$/;"	v	package:account	typeref:typename:*discordgo.Session
EggData	defs/savedata.go	/^type EggData struct {$/;"	s	package:defs
EggMoveIndex	defs/savedata.go	/^	EggMoveIndex          int       `json:"eggMoveIndex"`$/;"	m	struct:defs.EggData	typeref:typename:int
EggMoves	defs/savedata.go	/^	EggMoves        int         `json:"eggMoves"`$/;"	m	struct:defs.StarterEntry	typeref:typename:int
EggPity	defs/savedata.go	/^	EggPity            []int              `json:"eggPity"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:[]int
Eggs	defs/savedata.go	/^	Eggs               []EggData          `json:"eggs"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:[]EggData
EncounterSpawnChance	defs/savedata.go	/^	EncounterSpawnChance int                 `json:"encounterSpawnChance"`$/;"	m	struct:defs.MysteryEncounterSaveData	typeref:typename:int
EncounteredEvents	defs/savedata.go	/^	EncounteredEvents    []SeenEncounterData `json:"encounteredEvents"`$/;"	m	struct:defs.MysteryEncounterSaveData	typeref:typename:[]SeenEncounterData
EnemyModifiers	defs/savedata.go	/^	EnemyModifiers           []PersistentModifierData `json:"enemyModifiers"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:[]PersistentModifierData
EnemyParty	defs/savedata.go	/^	EnemyParty               []PokemonData            `json:"enemyParty"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:[]PokemonData
Error	api/savedata/clear.go	/^	Error   string `json:"error"`$/;"	m	struct:savedata.ClearResponse	typeref:typename:string
FaintCount	defs/savedata.go	/^	FaintCount               int                      `json:"faintCount"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:int
FetchAccountKeySaltFromUsername	db/account.go	/^func FetchAccountKeySaltFromUsername(username string) ([]byte, []byte, error) {$/;"	f	package:db	typeref:typename:([]byte, []byte, error)
FetchAdminDetailsByUsername	db/account.go	/^func FetchAdminDetailsByUsername(dbUsername string) (AdminSearchResponse, error) {$/;"	f	package:db	typeref:typename:(AdminSearchResponse, error)
FetchBattleCount	db/game.go	/^func FetchBattleCount() (int, error) {$/;"	f	package:db	typeref:typename:(int, error)
FetchClassicSessionCount	db/game.go	/^func FetchClassicSessionCount() (int, error) {$/;"	f	package:db	typeref:typename:(int, error)
FetchDiscordIdByUUID	db/account.go	/^func FetchDiscordIdByUUID(uuid []byte) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
FetchDiscordIdByUsername	db/account.go	/^func FetchDiscordIdByUsername(username string) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
FetchGoogleIdByUUID	db/account.go	/^func FetchGoogleIdByUUID(uuid []byte) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
FetchGoogleIdByUsername	db/account.go	/^func FetchGoogleIdByUsername(username string) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
FetchLastLoggedInDateByUsername	db/account.go	/^func FetchLastLoggedInDateByUsername(username string) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
FetchPlayerCount	db/game.go	/^func FetchPlayerCount() (int, error) {$/;"	f	package:db	typeref:typename:(int, error)
FetchRankingPageCount	db/daily.go	/^func FetchRankingPageCount(category int) (int, error) {$/;"	f	package:db	typeref:typename:(int, error)
FetchRankings	db/daily.go	/^func FetchRankings(category int, page int) ([]defs.DailyRanking, error) {$/;"	f	package:db	typeref:typename:([]defs.DailyRanking, error)
FetchTrainerIds	db/account.go	/^func FetchTrainerIds(uuid []byte) (trainerId, secretId int, err error) {$/;"	f	package:db	typeref:typename:(trainerId, secretId int, err error)
FetchUUIDFromToken	db/account.go	/^func FetchUUIDFromToken(token []byte) ([]byte, error) {$/;"	f	package:db	typeref:typename:([]byte, error)
FetchUUIDFromUsername	db/account.go	/^func FetchUUIDFromUsername(username string) ([]byte, error) {$/;"	f	package:db	typeref:typename:([]byte, error)
FetchUsernameByDiscordId	db/account.go	/^func FetchUsernameByDiscordId(discordId string) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
FetchUsernameByGoogleId	db/account.go	/^func FetchUsernameByGoogleId(googleId string) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
FetchUsernameBySessionToken	db/account.go	/^func FetchUsernameBySessionToken(token []byte) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
FetchUsernameFromUUID	db/account.go	/^func FetchUsernameFromUUID(uuid []byte) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
Friendship	defs/savedata.go	/^	Friendship      int         `json:"friendship"`$/;"	m	struct:defs.StarterEntry	typeref:typename:int
GachaType	defs/savedata.go	/^	GachaType             GachaType `json:"gachaType"`$/;"	m	struct:defs.EggData	typeref:typename:GachaType
GachaType	defs/savedata.go	/^type GachaType int$/;"	t	package:defs	typeref:typename:int
GameMode	defs/savedata.go	/^	GameMode                 GameMode                 `json:"gameMode"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:GameMode
GameMode	defs/savedata.go	/^	GameMode    GameMode                 `json:"gameMode"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:GameMode
GameMode	defs/savedata.go	/^type GameMode int$/;"	t	package:defs	typeref:typename:int
GameStats	defs/savedata.go	/^	GameStats          GameStats          `json:"gameStats"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:GameStats
GameStats	defs/savedata.go	/^type GameStats interface{}$/;"	i	package:defs
GameURL	api/account/common.go	/^	GameURL          string$/;"	v	package:account	typeref:typename:string
GameVersion	defs/savedata.go	/^	GameVersion              string                   `json:"gameVersion"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:string
GameVersion	defs/savedata.go	/^	GameVersion        string             `json:"gameVersion"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:string
GameVersion	defs/savedata.go	/^	GameVersion string                   `json:"gameVersion"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:string
Gender	defs/savedata.go	/^	Gender             int                `json:"gender"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:int
GenerateTokenForUsername	api/account/login.go	/^func GenerateTokenForUsername(username string) (string, error) {$/;"	f	package:account	typeref:typename:(string, error)
GenericAuthResponse	api/account/common.go	/^type GenericAuthResponse struct {$/;"	s	package:account
GetDailyRunSeed	db/daily.go	/^func GetDailyRunSeed() (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
GetLatestSessionSaveDataSlot	db/savedata.go	/^func GetLatestSessionSaveDataSlot(uuid []byte) (int, error) {$/;"	f	package:db	typeref:typename:(int, error)
GetSession	api/savedata/session.go	/^func GetSession(uuid []byte, slot int) (defs.SessionSaveData, error) {$/;"	f	package:savedata	typeref:typename:(defs.SessionSaveData, error)
GetSystem	api/savedata/system.go	/^func GetSystem(uuid []byte) (defs.SystemSaveData, error) {$/;"	f	package:savedata	typeref:typename:(defs.SystemSaveData, error)
GetSystemSaveFromS3	db/savedata.go	/^func GetSystemSaveFromS3(uuid []byte) (defs.SystemSaveData, error) {$/;"	f	package:db	typeref:typename:(defs.SystemSaveData, error)
GoogleCallbackURL	api/account/google.go	/^	GoogleCallbackURL  string$/;"	v	package:account	typeref:typename:string
GoogleClientID	api/account/google.go	/^	GoogleClientID     string$/;"	v	package:account	typeref:typename:string
GoogleClientSecret	api/account/google.go	/^	GoogleClientSecret string$/;"	v	package:account	typeref:typename:string
GoogleId	api/account/info.go	/^	GoogleId        string `json:"googleId"`$/;"	m	struct:account.InfoResponse	typeref:typename:string
GoogleId	db/account.go	/^	GoogleId        string `json:"googleId"`$/;"	m	struct:db.AdminSearchResponse	typeref:typename:string
HandleDiscordCallback	api/account/discord.go	/^func HandleDiscordCallback(w http.ResponseWriter, r *http.Request) (string, error) {$/;"	f	package:account	typeref:typename:(string, error)
HandleGoogleCallback	api/account/google.go	/^func HandleGoogleCallback(w http.ResponseWriter, r *http.Request) (string, error) {$/;"	f	package:account	typeref:typename:(string, error)
HasAdminRole	api/account/info.go	/^	HasAdminRole    bool   `json:"hasAdminRole"`$/;"	m	struct:account.InfoResponse	typeref:typename:bool
HatchWaves	defs/savedata.go	/^	HatchWaves            int       `json:"hatchWaves"`$/;"	m	struct:defs.EggData	typeref:typename:int
HatchedCount	defs/savedata.go	/^	HatchedCount int         `json:"hatchedCount"`$/;"	m	struct:defs.DexEntry	typeref:typename:int
Id	defs/savedata.go	/^	Id                    int       `json:"id"`$/;"	m	struct:defs.EggData	typeref:typename:int
Id	defs/savedata.go	/^	Id       int `json:"id"`$/;"	m	struct:defs.ChallengeData	typeref:typename:int
Info	api/account/info.go	/^func Info(username string, discordId string, googleId string, uuid []byte, hasAdminRole bool) (I/;"	f	package:account	typeref:typename:(InfoResponse, error)
InfoResponse	api/account/info.go	/^type InfoResponse struct {$/;"	s	package:account
Init	api/common.go	/^func Init(mux *http.ServeMux) error {$/;"	f	package:api	typeref:typename:error
Init	api/daily/common.go	/^func Init() error {$/;"	f	package:daily	typeref:typename:error
Init	cache/rediscache.go	/^func Init() error {$/;"	f	package:cache	typeref:typename:error
Init	db/db.go	/^func Init(username, password, protocol, address, database string) error {$/;"	f	package:db	typeref:typename:error
IsActiveSession	db/account.go	/^func IsActiveSession(uuid []byte, sessionId string) (bool, error) {$/;"	f	package:db	typeref:typename:(bool, error)
IsShiny	defs/savedata.go	/^	IsShiny               bool      `json:"isShiny"`$/;"	m	struct:defs.EggData	typeref:typename:bool
IsUserDiscordAdmin	api/account/discord.go	/^func IsUserDiscordAdmin(discordId string, discordGuildID string) (bool, error) {$/;"	f	package:account	typeref:typename:(bool, error)
Ivs	defs/savedata.go	/^	Ivs          []int       `json:"ivs"`$/;"	m	struct:defs.DexEntry	typeref:typename:[]int
LastActivity	db/account.go	/^	LastActivity	string `json:"lastLoggedIn"` \/\/ TODO: this is currently lastLoggedIn to match se/;"	m	struct:db.AdminSearchResponse	typeref:typename:string
LastSessionSlot	api/account/info.go	/^	LastSessionSlot int    `json:"lastSessionSlot"`$/;"	m	struct:account.InfoResponse	typeref:typename:int
Login	api/account/login.go	/^func Login(username, password string) (LoginResponse, error) {$/;"	f	package:account	typeref:typename:(LoginResponse, error)
LoginResponse	api/account/login.go	/^type LoginResponse GenericAuthResponse$/;"	t	package:account	typeref:typename:GenericAuthResponse
Logout	api/account/logout.go	/^func Logout(token []byte) error {$/;"	f	package:account	typeref:typename:error
Modifiers	defs/savedata.go	/^	Modifiers                []PersistentModifierData `json:"modifiers"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:[]PersistentModifierData
Modifiers	defs/savedata.go	/^	Modifiers   []PersistentModifierData `json:"modifiers"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:[]PersistentModifierData
Money	defs/savedata.go	/^	Money                    int                      `json:"money"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:int
Money	defs/savedata.go	/^	Money       int                      `json:"money"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:int
Moveset	defs/savedata.go	/^	Moveset         interface{} `json:"moveset"`$/;"	m	struct:defs.StarterEntry	typeref:typename:interface{}
MysteryEncounterSaveData	defs/savedata.go	/^	MysteryEncounterSaveData MysteryEncounterSaveData `json:"mysteryEncounterSaveData"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:MysteryEncounterSaveData
MysteryEncounterSaveData	defs/savedata.go	/^type MysteryEncounterSaveData struct {$/;"	s	package:defs
MysteryEncounterTier	defs/savedata.go	/^type MysteryEncounterTier int$/;"	t	package:defs	typeref:typename:int
MysteryEncounterType	defs/savedata.go	/^	MysteryEncounterType     MysteryEncounterType     `json:"mysteryEncounterType"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:MysteryEncounterType
MysteryEncounterType	defs/savedata.go	/^type MysteryEncounterType int$/;"	t	package:defs	typeref:typename:int
NatureAttr	defs/savedata.go	/^	NatureAttr   int         `json:"natureAttr"`$/;"	m	struct:defs.DexEntry	typeref:typename:int
NewClear	api/savedata/newclear.go	/^func NewClear(uuid []byte, slot int) (bool, error) {$/;"	f	package:savedata	typeref:typename:(bool, error)
OAuthCallbackURL	api/account/common.go	/^	OAuthCallbackURL string$/;"	v	package:account	typeref:typename:string
OverrideHiddenAbility	defs/savedata.go	/^	OverrideHiddenAbility bool      `json:"overrideHiddenAbility"`$/;"	m	struct:defs.EggData	typeref:typename:bool
Party	defs/savedata.go	/^	Party                    []PokemonData            `json:"party"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:[]PokemonData
Party	defs/savedata.go	/^	Party       []PokemonData            `json:"party"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:[]PokemonData
PassiveAttr	defs/savedata.go	/^	PassiveAttr     int         `json:"passiveAttr"`$/;"	m	struct:defs.StarterEntry	typeref:typename:int
PersistentModifierData	defs/savedata.go	/^type PersistentModifierData interface{}$/;"	i	package:defs
PlayTime	defs/savedata.go	/^	PlayTime                 int                      `json:"playTime"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:int
PlayTime	defs/savedata.go	/^	PlayTime    int                      `json:"playTime"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:int
PlayerCount	defs/game.go	/^	PlayerCount int `json:"playerCount"`$/;"	m	struct:defs.TitleStats	typeref:typename:int
PokeballCounts	defs/savedata.go	/^	PokeballCounts           PokeballCounts           `json:"pokeballCounts"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:PokeballCounts
PokeballCounts	defs/savedata.go	/^type PokeballCounts map[string]int$/;"	t	package:defs	typeref:typename:map[string]int
PokemonData	defs/savedata.go	/^type PokemonData interface{}$/;"	i	package:defs
QueuedEncounter	defs/savedata.go	/^type QueuedEncounter struct {$/;"	s	package:defs
QueuedEncounters	defs/savedata.go	/^	QueuedEncounters     []QueuedEncounter   `json:"queuedEncounters"`$/;"	m	struct:defs.MysteryEncounterSaveData	typeref:typename:[]QueuedEncounter
Rank	defs/daily.go	/^	Rank     int    `json:"rank"`$/;"	m	struct:defs.DailyRanking	typeref:typename:int
RankingPageCount	api/daily/rankingspagecount.go	/^func RankingPageCount(category int) (int, error) {$/;"	f	package:daily	typeref:typename:(int, error)
Rankings	api/daily/rankings.go	/^func Rankings(category, page int) ([]defs.DailyRanking, error) {$/;"	f	package:daily	typeref:typename:([]defs.DailyRanking, error)
Rdb	cache/rediscache.go	/^	Rdb *redis.Client$/;"	v	package:cache	typeref:typename:*redis.Client
ReadSeedCompleted	db/savedata.go	/^func ReadSeedCompleted(uuid []byte, seed string) (bool, error) {$/;"	f	package:db	typeref:typename:(bool, error)
ReadSessionSaveData	db/savedata.go	/^func ReadSessionSaveData(uuid []byte, slot int) (defs.SessionSaveData, error) {$/;"	f	package:db	typeref:typename:(defs.SessionSaveData, error)
ReadSystemSaveData	db/savedata.go	/^func ReadSystemSaveData(uuid []byte) (defs.SystemSaveData, error) {$/;"	f	package:db	typeref:typename:(defs.SystemSaveData, error)
Register	api/account/register.go	/^func Register(username, password string) error {$/;"	f	package:account	typeref:typename:error
Registered	db/account.go	/^	Registered		string `json:"registered"`$/;"	m	struct:db.AdminSearchResponse	typeref:typename:string
RemoveDiscordIdByDiscordId	db/account.go	/^func RemoveDiscordIdByDiscordId(discordId string) error {$/;"	f	package:db	typeref:typename:error
RemoveDiscordIdByUUID	db/account.go	/^func RemoveDiscordIdByUUID(uuid []byte) error {$/;"	f	package:db	typeref:typename:error
RemoveDiscordIdByUsername	db/account.go	/^func RemoveDiscordIdByUsername(username string) error {$/;"	f	package:db	typeref:typename:error
RemoveGoogleIdByDiscordId	db/account.go	/^func RemoveGoogleIdByDiscordId(discordId string) error {$/;"	f	package:db	typeref:typename:error
RemoveGoogleIdByUUID	db/account.go	/^func RemoveGoogleIdByUUID(uuid []byte) error {$/;"	f	package:db	typeref:typename:error
RemoveGoogleIdByUsername	db/account.go	/^func RemoveGoogleIdByUsername(username string) error {$/;"	f	package:db	typeref:typename:error
RemoveSessionFromToken	db/account.go	/^func RemoveSessionFromToken(token []byte) error {$/;"	f	package:db	typeref:typename:error
Result	defs/savedata.go	/^	Result      SessionHistoryResult     `json:"sessionHistoryResult"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:SessionHistoryResult
RetrieveDiscordId	api/account/discord.go	/^func RetrieveDiscordId(code string) (string, error) {$/;"	f	package:account	typeref:typename:(string, error)
RetrieveGoogleId	api/account/google.go	/^func RetrieveGoogleId(code string) (string, error) {$/;"	f	package:account	typeref:typename:(string, error)
RetrievePlaytime	db/savedata.go	/^func RetrievePlaytime(uuid []byte) (int, error) {$/;"	f	package:db	typeref:typename:(int, error)
ReviveCount	defs/savedata.go	/^	ReviveCount              int                      `json:"reviveCount"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:int
Score	defs/daily.go	/^	Score    int    `json:"score"`$/;"	m	struct:defs.DailyRanking	typeref:typename:int
Score	defs/savedata.go	/^	Score                    int                      `json:"score"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:int
Score	defs/savedata.go	/^	Score       int                      `json:"score"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:int
SecretId	defs/savedata.go	/^	SecretId           int                `json:"secretId"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:int
Seed	api/daily/common.go	/^func Seed() string {$/;"	f	package:daily	typeref:typename:string
Seed	defs/savedata.go	/^	Seed                     string                   `json:"seed"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:string
Seed	defs/savedata.go	/^	Seed        string                   `json:"seed"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:string
SeenAttr	defs/savedata.go	/^	SeenAttr     interface{} `json:"seenAttr"`   \/\/ integer or string$/;"	m	struct:defs.DexEntry	typeref:typename:interface{}
SeenCount	defs/savedata.go	/^	SeenCount    int         `json:"seenCount"`$/;"	m	struct:defs.DexEntry	typeref:typename:int
SeenEncounterData	defs/savedata.go	/^type SeenEncounterData struct {$/;"	s	package:defs
SelectedOption	defs/savedata.go	/^	SelectedOption int                  `json:"selectedOption"`$/;"	m	struct:defs.SeenEncounterData	typeref:typename:int
Session	api/endpoints.go	/^	Session         defs.SessionSaveData `json:"session"`$/;"	m	struct:api.CombinedSaveData	typeref:typename:defs.SessionSaveData
SessionHistoryData	defs/savedata.go	/^type SessionHistoryData struct {$/;"	s	package:defs
SessionHistoryResult	defs/savedata.go	/^type SessionHistoryResult int$/;"	t	package:defs	typeref:typename:int
SessionSaveData	defs/savedata.go	/^type SessionSaveData struct {$/;"	s	package:defs
SessionSlotCount	defs/savedata.go	/^const SessionSlotCount = 5$/;"	c	package:defs
SessionSlotId	api/endpoints.go	/^	SessionSlotId   int                  `json:"sessionSlotId"`$/;"	m	struct:api.CombinedSaveData	typeref:typename:int
SetAccountBanned	db/account.go	/^func SetAccountBanned(uuid []byte, banned bool) error {$/;"	f	package:db	typeref:typename:error
Severity	defs/savedata.go	/^	Severity int `json:"severity"`$/;"	m	struct:defs.ChallengeData	typeref:typename:int
SourceType	defs/savedata.go	/^	SourceType            int       `json:"sourceType"`$/;"	m	struct:defs.EggData	typeref:typename:int
SpawnPercent	defs/savedata.go	/^	SpawnPercent int                  `json:"spawnPercent"`$/;"	m	struct:defs.QueuedEncounter	typeref:typename:int
Species	defs/savedata.go	/^	Species               int       `json:"species"`$/;"	m	struct:defs.EggData	typeref:typename:int
StarterData	defs/savedata.go	/^	StarterData        StarterData        `json:"starterData"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:StarterData
StarterData	defs/savedata.go	/^type StarterData map[int]StarterEntry$/;"	t	package:defs	typeref:typename:map[int]StarterEntry
StarterEggMoveData	defs/savedata.go	/^	StarterEggMoveData StarterEggMoveData `json:"starterEggMoveData"` \/\/ Legacy$/;"	m	struct:defs.SystemSaveData	typeref:typename:StarterEggMoveData
StarterEggMoveData	defs/savedata.go	/^type StarterEggMoveData map[int]int$/;"	t	package:defs	typeref:typename:map[int]int
StarterEntry	defs/savedata.go	/^type StarterEntry struct {$/;"	s	package:defs
StarterMoveData	defs/savedata.go	/^	StarterMoveData    StarterMoveData    `json:"starterMoveData"`    \/\/ Legacy$/;"	m	struct:defs.SystemSaveData	typeref:typename:StarterMoveData
StarterMoveData	defs/savedata.go	/^type StarterMoveData map[int]interface{}$/;"	t	package:defs	typeref:typename:map[int]interface{}
StoreSessionSaveData	db/savedata.go	/^func StoreSessionSaveData(uuid []byte, data defs.SessionSaveData, slot int) error {$/;"	f	package:db	typeref:typename:error
StoreSystemSaveData	db/savedata.go	/^func StoreSystemSaveData(uuid []byte, data defs.SystemSaveData) error {$/;"	f	package:db	typeref:typename:error
StoreSystemSaveDataS3	db/savedata.go	/^func StoreSystemSaveDataS3(uuid []byte, data defs.SystemSaveData) error {$/;"	f	package:db	typeref:typename:error
Success	api/savedata/clear.go	/^	Success bool   `json:"success"`$/;"	m	struct:savedata.ClearResponse	typeref:typename:bool
System	api/endpoints.go	/^	System          defs.SystemSaveData  `json:"system"`$/;"	m	struct:api.CombinedSaveData	typeref:typename:defs.SystemSaveData
SystemData	api/endpoints.go	/^	SystemData defs.SystemSaveData `json:"systemData"`$/;"	m	struct:api.SystemVerifyResponse	typeref:typename:defs.SystemSaveData
SystemSaveData	defs/savedata.go	/^type SystemSaveData struct {$/;"	s	package:defs
SystemVerifyResponse	api/endpoints.go	/^type SystemVerifyResponse struct {$/;"	s	package:api
Tier	defs/savedata.go	/^	Tier                  int       `json:"tier"`$/;"	m	struct:defs.EggData	typeref:typename:int
Tier	defs/savedata.go	/^	Tier           MysteryEncounterTier `json:"tier"`$/;"	m	struct:defs.SeenEncounterData	typeref:typename:MysteryEncounterTier
Timestamp	defs/savedata.go	/^	Timestamp                int                      `json:"timestamp"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:int
Timestamp	defs/savedata.go	/^	Timestamp             int       `json:"timestamp"`$/;"	m	struct:defs.EggData	typeref:typename:int
Timestamp	defs/savedata.go	/^	Timestamp          int                `json:"timestamp"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:int
Timestamp	defs/savedata.go	/^	Timestamp   int                      `json:"timestamp"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:int
TitleStats	defs/game.go	/^type TitleStats struct {$/;"	s	package:defs
Token	api/account/common.go	/^	Token string `json:"token"`$/;"	m	struct:account.GenericAuthResponse	typeref:typename:string
TokenSize	api/account/common.go	/^	TokenSize = 32$/;"	c	package:account
Trainer	defs/savedata.go	/^	Trainer                  TrainerData              `json:"trainer"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:TrainerData
TrainerData	defs/savedata.go	/^type TrainerData interface{}$/;"	i	package:defs
TrainerId	defs/savedata.go	/^	TrainerId          int                `json:"trainerId"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:int
TryAddDailyRun	db/daily.go	/^func TryAddDailyRun(seed string) (string, error) {$/;"	f	package:db	typeref:typename:(string, error)
TryAddSeedCompletion	db/savedata.go	/^func TryAddSeedCompletion(uuid []byte, seed string, mode int) (bool, error) {$/;"	f	package:db	typeref:typename:(bool, error)
Type	defs/savedata.go	/^	Type           MysteryEncounterType `json:"type"`$/;"	m	struct:defs.SeenEncounterData	typeref:typename:MysteryEncounterType
Type	defs/savedata.go	/^	Type         MysteryEncounterType `json:"type"`$/;"	m	struct:defs.QueuedEncounter	typeref:typename:MysteryEncounterType
UUIDSize	api/account/common.go	/^	UUIDSize  = 16$/;"	c	package:account
UnlockPity	defs/savedata.go	/^	UnlockPity         []int              `json:"unlockPity"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:[]int
Unlocks	defs/savedata.go	/^	Unlocks            Unlocks            `json:"unlocks"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:Unlocks
Unlocks	defs/savedata.go	/^type Unlocks map[int]bool$/;"	t	package:defs	typeref:typename:map[int]bool
Update	api/savedata/update.go	/^func Update(uuid []byte, slot int, save any) error {$/;"	f	package:savedata	typeref:typename:error
UpdateAccountLastActivity	db/account.go	/^func UpdateAccountLastActivity(uuid []byte) error {$/;"	f	package:db	typeref:typename:error
UpdateAccountPassword	db/account.go	/^func UpdateAccountPassword(uuid, key, salt []byte) error {$/;"	f	package:db	typeref:typename:error
UpdateAccountStats	db/account.go	/^func UpdateAccountStats(uuid []byte, stats defs.GameStats, voucherCounts map[string]int) error {$/;"	f	package:db	typeref:typename:error
UpdateActiveSession	db/account.go	/^func UpdateActiveSession(uuid []byte, clientSessionId string) error {$/;"	f	package:db	typeref:typename:error
UpdateSession	api/savedata/session.go	/^func UpdateSession(uuid []byte, slot int, data defs.SessionSaveData) error {$/;"	f	package:savedata	typeref:typename:error
UpdateSystem	api/savedata/system.go	/^func UpdateSystem(uuid []byte, data defs.SystemSaveData) error {$/;"	f	package:savedata	typeref:typename:error
UpdateTrainerIds	db/account.go	/^func UpdateTrainerIds(trainerId, secretId int, uuid []byte) error {$/;"	f	package:db	typeref:typename:error
Username	api/account/info.go	/^	Username        string `json:"username"`$/;"	m	struct:account.InfoResponse	typeref:typename:string
Username	db/account.go	/^	Username        string `json:"username"`$/;"	m	struct:db.AdminSearchResponse	typeref:typename:string
Username	defs/daily.go	/^	Username string `json:"username"`$/;"	m	struct:defs.DailyRanking	typeref:typename:string
Valid	api/endpoints.go	/^	Valid      bool                `json:"valid"`$/;"	m	struct:api.SystemVerifyResponse	typeref:typename:bool
Value	defs/savedata.go	/^	Value    int `json:"value"`$/;"	m	struct:defs.ChallengeData	typeref:typename:int
ValueReduction	defs/savedata.go	/^	ValueReduction  int         `json:"valueReduction"`$/;"	m	struct:defs.StarterEntry	typeref:typename:int
VariantTier	defs/savedata.go	/^	VariantTier           int       `json:"variantTier"`$/;"	m	struct:defs.EggData	typeref:typename:int
VictoryCount	defs/savedata.go	/^	VictoryCount             int                      `json:"victoryCount"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:int
VoucherCounts	defs/savedata.go	/^	VoucherCounts      VoucherCounts      `json:"voucherCounts"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:VoucherCounts
VoucherCounts	defs/savedata.go	/^type VoucherCounts map[string]int$/;"	t	package:defs	typeref:typename:map[string]int
VoucherUnlocks	defs/savedata.go	/^	VoucherUnlocks     VoucherUnlocks     `json:"voucherUnlocks"`$/;"	m	struct:defs.SystemSaveData	typeref:typename:VoucherUnlocks
VoucherUnlocks	defs/savedata.go	/^type VoucherUnlocks map[string]int$/;"	t	package:defs	typeref:typename:map[string]int
Wave	defs/daily.go	/^	Wave     int    `json:"wave"`$/;"	m	struct:defs.DailyRanking	typeref:typename:int
WaveIndex	defs/savedata.go	/^	WaveIndex                int                      `json:"waveIndex"`$/;"	m	struct:defs.SessionSaveData	typeref:typename:int
WaveIndex	defs/savedata.go	/^	WaveIndex      int                  `json:"waveIndex"`$/;"	m	struct:defs.SeenEncounterData	typeref:typename:int
WaveIndex	defs/savedata.go	/^	WaveIndex   int                      `json:"waveIndex"`$/;"	m	struct:defs.SessionHistoryData	typeref:typename:int
account	api/account/changepw.go	/^package account$/;"	p
account	api/account/common.go	/^package account$/;"	p
account	api/account/discord.go	/^package account$/;"	p
account	api/account/google.go	/^package account$/;"	p
account	api/account/info.go	/^package account$/;"	p
account	api/account/login.go	/^package account$/;"	p
account	api/account/logout.go	/^package account$/;"	p
account	api/account/register.go	/^package account$/;"	p
api	api/common.go	/^package api$/;"	p
api	api/endpoints.go	/^package api$/;"	p
api	api/stats.go	/^package api$/;"	p
battleCount	api/stats.go	/^	battleCount         int$/;"	v	package:api	typeref:typename:int
cache	cache/rediscache.go	/^package cache$/;"	p
classicSessionCount	api/stats.go	/^	classicSessionCount int$/;"	v	package:api	typeref:typename:int
createListener	rogueserver.go	/^func createListener(proto, addr string) (net.Listener, error) {$/;"	f	package:main	typeref:typename:(net.Listener, error)
daily	api/daily/common.go	/^package daily$/;"	p
daily	api/daily/rankings.go	/^package daily$/;"	p
daily	api/daily/rankingspagecount.go	/^package daily$/;"	p
db	db/account.go	/^package db$/;"	p
db	db/daily.go	/^package db$/;"	p
db	db/db.go	/^package db$/;"	p
db	db/game.go	/^package db$/;"	p
db	db/savedata.go	/^package db$/;"	p
debugHandler	rogueserver.go	/^func debugHandler(router *http.ServeMux) http.Handler {$/;"	f	package:main	typeref:typename:http.Handler
defs	defs/daily.go	/^package defs$/;"	p
defs	defs/game.go	/^package defs$/;"	p
defs	defs/savedata.go	/^package defs$/;"	p
deriveArgon2IDKey	api/account/common.go	/^func deriveArgon2IDKey(password, salt []byte) []byte {$/;"	f	package:account	typeref:typename:[]byte
deriveSeed	api/daily/common.go	/^func deriveSeed(seedTime time.Time) []byte {$/;"	f	package:daily	typeref:typename:[]byte
getEnv	cache/rediscache.go	/^func getEnv(k, def string) string {$/;"	f	package:cache	typeref:typename:string
getEnv	rogueserver.go	/^func getEnv(key string, defaultValue string) string {$/;"	f	package:main	typeref:typename:string
handle	db/db.go	/^var handle *sql.DB$/;"	v	package:db	typeref:typename:*sql.DB
handleAccountChangePW	api/endpoints.go	/^func handleAccountChangePW(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAccountInfo	api/endpoints.go	/^func handleAccountInfo(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAccountLogin	api/endpoints.go	/^func handleAccountLogin(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAccountLogout	api/endpoints.go	/^func handleAccountLogout(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAccountRegister	api/endpoints.go	/^func handleAccountRegister(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAdminDiscordLink	api/endpoints.go	/^func handleAdminDiscordLink(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAdminDiscordUnlink	api/endpoints.go	/^func handleAdminDiscordUnlink(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAdminGoogleLink	api/endpoints.go	/^func handleAdminGoogleLink(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAdminGoogleUnlink	api/endpoints.go	/^func handleAdminGoogleUnlink(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleAdminSearch	api/endpoints.go	/^func handleAdminSearch(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleDailyRankingPageCount	api/endpoints.go	/^func handleDailyRankingPageCount(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleDailyRankings	api/endpoints.go	/^func handleDailyRankings(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleDailySeed	api/endpoints.go	/^func handleDailySeed(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleGameClassicSessionCount	api/endpoints.go	/^func handleGameClassicSessionCount(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleGameTitleStats	api/endpoints.go	/^func handleGameTitleStats(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleProviderCallback	api/endpoints.go	/^func handleProviderCallback(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleProviderLogout	api/endpoints.go	/^func handleProviderLogout(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleSession	api/endpoints.go	/^func handleSession(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleSystem	api/endpoints.go	/^func handleSystem(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
handleUpdateAll	api/endpoints.go	/^func handleUpdateAll(w http.ResponseWriter, r *http.Request) {$/;"	f	package:api
httpError	api/common.go	/^func httpError(w http.ResponseWriter, r *http.Request, err error, code int) {$/;"	f	package:api
isValidUsername	api/account/common.go	/^	isValidUsername = regexp.MustCompile(`^\\w{1,16}$`).MatchString$/;"	v	package:account
main	redis_ping.go	/^func main() {$/;"	f	package:main
main	redis_ping.go	/^package main$/;"	p
main	rogueserver.go	/^func main() {$/;"	f	package:main
main	rogueserver.go	/^package main$/;"	p
must	redis_ping.go	/^func must(err error) {$/;"	f	package:main
parseJWTWithoutValidation	api/account/google.go	/^func parseJWTWithoutValidation(idToken string) (string, error) {$/;"	f	package:account	typeref:typename:(string, error)
playerCount	api/stats.go	/^	playerCount         int$/;"	v	package:api	typeref:typename:int
prodHandler	rogueserver.go	/^func prodHandler(router *http.ServeMux, clienturl string) http.Handler {$/;"	f	package:main	typeref:typename:http.Handler
savedata	api/savedata/clear.go	/^package savedata$/;"	p
savedata	api/savedata/common.go	/^package savedata$/;"	p
savedata	api/savedata/delete.go	/^package savedata$/;"	p
savedata	api/savedata/newclear.go	/^package savedata$/;"	p
savedata	api/savedata/session.go	/^package savedata$/;"	p
savedata	api/savedata/system.go	/^package savedata$/;"	p
savedata	api/savedata/update.go	/^package savedata$/;"	p
scheduleStatRefresh	api/stats.go	/^func scheduleStatRefresh() error {$/;"	f	package:api	typeref:typename:error
scheduler	api/daily/common.go	/^	scheduler = cron.New(cron.WithLocation(time.UTC))$/;"	v	package:daily
scheduler	api/stats.go	/^	scheduler           = cron.New(cron.WithLocation(time.UTC))$/;"	v	package:api
secondsPerDay	api/daily/common.go	/^const secondsPerDay = 60 * 60 * 24$/;"	c	package:daily
secret	api/daily/common.go	/^	secret    []byte$/;"	v	package:daily	typeref:typename:[]byte
semaphore	api/account/common.go	/^	semaphore       = make(chan bool, ArgonMaxInstances)$/;"	v	package:account
setupDb	db/db.go	/^func setupDb(tx *sql.Tx) error {$/;"	f	package:db	typeref:typename:error
tokenAndUuidFromRequest	api/common.go	/^func tokenAndUuidFromRequest(r *http.Request) ([]byte, []byte, error) {$/;"	f	package:api	typeref:typename:([]byte, []byte, error)
tokenFromRequest	api/common.go	/^func tokenFromRequest(r *http.Request) ([]byte, error) {$/;"	f	package:api	typeref:typename:([]byte, error)
updateStats	api/stats.go	/^func updateStats() error {$/;"	f	package:api	typeref:typename:error
uuidFromRequest	api/common.go	/^func uuidFromRequest(r *http.Request) ([]byte, error) {$/;"	f	package:api	typeref:typename:([]byte, error)
validateSessionCompleted	api/savedata/common.go	/^func validateSessionCompleted(session defs.SessionSaveData) bool {$/;"	f	package:savedata	typeref:typename:bool
writeJSON	api/common.go	/^func writeJSON(w http.ResponseWriter, r *http.Request, data any) {$/;"	f	package:api
