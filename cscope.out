cscope 15 /home/user/duream/custom-rogueserver-redis               0000083235
	@api/account/changepw.go

18 
∑ckage
 
accou¡


20 
imp‹t
 (

27 
func
 
	$Ch™gePW
(
uuid
 []
byã
, 
∑ssw‹d
 
°rög
Ë
îr‹
 {

28 
	`Àn
(
∑ssw‹d
) < 6 {

29  
fmt
.
	`Eº‹f
("invalidÖassword")

32 
ß…
 :
	`make
([]
byã
, 
Arg⁄SÆtSize
)

33 
_
, 
îr
 :
ønd
.
	`Ród
(
ß…
)

34 
îr
 !
nû
 {

35  
fmt
.
	`Eº‹f
("ÁûedÅÿgíî©êß…: %s", 
îr
)

38 
îr
 = 
db
.
	`Upd©eAccou¡Passw‹d
(
uuid
, 
	`dîiveArg⁄2IDKey
([]
	`byã
(
∑ssw‹d
), 
ß…
), salt)

39 
îr
 !
nû
 {

40  
fmt
.
	`Eº‹f
("ÁûedÅÿaddáccou¡Ñec‹d: %s", 
îr
)

43  
nû


44 
	}
}

	@api/account/common.go

18 
∑ckage
 
accou¡


20 
imp‹t
 (

27 
ty≥
 
GíîicAuthRe•⁄£
 struct {

28 
Tokí
 
	m°rög
 `
	mjs⁄
:"token"`

32 
Arg⁄Time
 = 1

33 
Arg⁄Mem‹y
 = 256 * 1024

34 
Arg⁄Thªads
 = 4

35 
Arg⁄KeySize
 = 32

36 
Arg⁄SÆtSize
 = 16

38 
UUIDSize
 = 16

39 
TokíSize
 = 32

42 
	`v¨
 (

43 
Arg⁄MaxIn°™˚s
 = 
ru¡ime
.
	$NumCPU
()

45 
isVÆidU£∫ame
 = 
ªgexp
.
	`Mu°Compûe
(`^\
w
{1,16
	}

}$
`).
M©chSåög


46 
£m≠h‹e
 = 
	$make
(
ch™
 
boﬁ
, 
Arg⁄MaxIn°™˚s
)

48 
GameURL
 
°rög


49 
OAuthCÆlbackURL
 
°rög


52 
func
 
	`dîiveArg⁄2IDKey
(
∑ssw‹d
, 
ß…
 []
byã
) []byte {

53 
£m≠h‹e
 <- 
åue


54 
de„r
 
	`func
(Ë{ <-
£m≠h‹e
 }()

56  
¨g⁄2
.
	`IDKey
(
∑ssw‹d
, 
ß…
, 
Arg⁄Time
, 
Arg⁄Mem‹y
, 
Arg⁄Thªads
, 
Arg⁄KeySize
)

57 
	}
}

	@api/account/discord.go

18 
∑ckage
 
accou¡


20 
imp‹t
 (

29 
	$v¨
 (

30 
Disc‹dClõ¡ID
 
°rög


31 
Disc‹dClõ¡Se¸ë
 
°rög


32 
Disc‹dCÆlbackURL
 
°rög


34 
Disc‹dSessi⁄
 *
disc‹dgo
.
Sessi⁄


35 
Disc‹dGuûdID
 
°rög


38 
func
 
	$H™dÀDisc‹dCÆlback
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
Ë(
°rög
, 
îr‹
) {

39 
code
 :
r
.
URL
.
	`Quîy
().
	`Gë
("code")

40 
code
 == "" {

41 
hâp
.
	`Redúe˘
(
w
, 
r
, 
GameURL
, hâp.
SètusSìOthî
)

42  "", 
îr‹s
.
	`New
("code isÉmpty")

45 
disc‹dId
, 
îr
 :
	`RërõveDisc‹dId
(
code
)

46 
îr
 !
nû
 {

47 
hâp
.
	`Redúe˘
(
w
, 
r
, 
GameURL
, hâp.
SètusSìOthî
)

48  "", 
îr


51  
disc‹dId
, 
nû


52 
	}
}

54 
func
 
	$RërõveDisc‹dId
(
code
 
°rög
Ë(°rög, 
îr‹
) {

55 
v
 :
	`make
(
uæ
.
VÆues
)

56 
v
.
	`Së
("˛õ¡_id", 
Disc‹dClõ¡ID
)

57 
v
.
	`Së
("˛õ¡_£¸ë", 
Disc‹dClõ¡Se¸ë
)

58 
v
.
	`Së
("grant_type", "authorization_code")

59 
v
.
	`Së
("code", 
code
)

60 
v
.
	`Së
("ªdúe˘_uri", 
Disc‹dCÆlbackURL
)

61 
v
.
	`Së
("scope", "identify")

63 
tokí
, 
îr
 :
hâp
.
	`Po°F‹m
("hâps://disc‹d.com/≠i/ﬂuth2/tokí", 
v
)

64 
îr
 !
nû
 {

65  "", 
îr


69 
ty≥
 
TokíRe•⁄£
 struct {

70 
Ac˚ssTokí
 
°rög
 `
js⁄
:"access_token"`

71 
TokíTy≥
 
°rög
 `
js⁄
:"token_type"`

72 
ExpúesIn
 `
js⁄
:"expires_in"`

73 
Sc›e
 
°rög
 `
js⁄
:"scope"`

74 
Re‰eshTokí
 
°rög
 `
js⁄
:"refresh_token"`

77 
v¨
 
tokíRe•⁄£
 
TokíRe•⁄£


78 
îr
 = 
js⁄
.
	`NewDecodî
(
tokí
.
Body
).
	`Decode
(&
tokíRe•⁄£
)

79 
îr
 !
nû
 {

80  "", 
îr


83 
ac˚ss_tokí
 :
tokíRe•⁄£
.
Ac˚ssTokí


84 
ac˚ss_tokí
 == "" {

85  "", 
îr‹s
.
	`New
("accessÅoken isÉmpty")

88 
˛õ¡
 :&
hâp
.
Clõ¡
{}

89 
ªq
, 
îr
 :
hâp
.
	`NewReque°
("GET", "hâps://disc‹d.com/≠i/u£rs/@me", 
nû
)

90 
îr
 !
nû
 {

91  "", 
îr


94 
ªq
.
Hódî
.
	`Së
("Auth‹iz©i⁄", "Bóª∏"+
ac˚ss_tokí
)

95 
ª•
, 
îr
 :
˛õ¡
.
	`Do
(
ªq
)

96 
îr
 !
nû
 {

97  "", 
îr


100 
de„r
 
ª•
.
Body
.
	`Clo£
()

102 
ty≥
 
U£r
 struct {

103 
Id
 
°rög
 `
js⁄
:"id"`

106 
v¨
 
u£r
 
U£r


107 
îr
 = 
js⁄
.
	`NewDecodî
(
ª•
.
Body
).
	`Decode
(&
u£r
)

108 
îr
 !
nû
 {

109  "", 
îr


112  
u£r
.
Id
, 
nû


113 
	}
}

115 
func
 
	$IsU£rDisc‹dAdmö
(
disc‹dId
 
°rög
, 
disc‹dGuûdID
 såögË(
boﬁ
, 
îr‹
) {

117 
rﬁes
, 
îr
 :
Disc‹dSessi⁄
.
	`GuûdRﬁes
(
disc‹dGuûdID
)

118 
îr
 !
nû
 {

119  
Ál£
, 
îr


123 
u£rRﬁes
, 
îr
 :
Disc‹dSessi⁄
.
	`GuûdMembî
(
disc‹dGuûdID
, 
disc‹dId
)

124 
îr
 !
nû
 {

125  
Ál£
, 
îr


129 
v¨
 
hasRﬁe
 
boﬁ


130 
_
, 
rﬁe
 :
ønge
 
u£rRﬁes
.
Rﬁes
 {

131 
_
, 
guûdRﬁe
 :
ønge
 
rﬁes
 {

132 
rﬁe
 =
guûdRﬁe
.
ID
 && (guûdRﬁe.
Name
 == "Dev" || guildRole.Name == "Division Heads" || guildRole.Name == "Helper") {

133 
hasRﬁe
 = 
åue


139 !
hasRﬁe
 {

140  
Ál£
, 
nû


143  
åue
, 
nû


144 
	}
}

	@api/account/google.go

18 
∑ckage
 
accou¡


20 
imp‹t
 (

29 
	$v¨
 (

30 
GoogÀClõ¡ID
 
°rög


31 
GoogÀClõ¡Se¸ë
 
°rög


32 
GoogÀCÆlbackURL
 
°rög


35 
func
 
	$H™dÀGoogÀCÆlback
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
Ë(
°rög
, 
îr‹
) {

36 
code
 :
r
.
URL
.
	`Quîy
().
	`Gë
("code")

37 
code
 == "" {

38 
hâp
.
	`Redúe˘
(
w
, 
r
, 
GameURL
, hâp.
SètusSìOthî
)

39  "", 
îr‹s
.
	`New
("code isÉmpty")

42 
googÀId
, 
îr
 :
	`RërõveGoogÀId
(
code
)

43 
îr
 !
nû
 {

44 
hâp
.
	`Redúe˘
(
w
, 
r
, 
GameURL
, hâp.
SètusSìOthî
)

45  "", 
îr


48  
googÀId
, 
nû


49 
	}
}

51 
func
 
	$RërõveGoogÀId
(
code
 
°rög
Ë(°rög, 
îr‹
) {

52 
v
 :
	`make
(
uæ
.
VÆues
)

53 
v
.
	`Së
("˛õ¡_id", 
GoogÀClõ¡ID
)

54 
v
.
	`Së
("˛õ¡_£¸ë", 
GoogÀClõ¡Se¸ë
)

55 
v
.
	`Së
("code", 
code
)

56 
v
.
	`Së
("grant_type", "authorization_code")

57 
v
.
	`Së
("ªdúe˘_uri", 
GoogÀCÆlbackURL
)

59 
tokí
, 
îr
 :
hâp
.
	`Po°F‹m
("hâps://ﬂuth2.googÀ≠is.com/tokí", 
v
)

60 
îr
 !
nû
 {

61  "", 
îr


64 
de„r
 
tokí
.
Body
.
	`Clo£
()

66 
ty≥
 
TokíRe•⁄£
 struct {

67 
Ac˚ssTokí
 
°rög
 `
js⁄
:"access_token"`

68 
TokíTy≥
 
°rög
 `
js⁄
:"token_type"`

69 
ExpúesIn
 `
js⁄
:"expires_in"`

70 
IdTokí
 
°rög
 `
js⁄
:"id_token"`

71 
Re‰eshTokí
 
°rög
 `
js⁄
:"refresh_token"`

72 
Sc›e
 
°rög
 `
js⁄
:"scope"`

75 
v¨
 
tokíRe•⁄£
 
TokíRe•⁄£


76 
îr
 = 
js⁄
.
	`NewDecodî
(
tokí
.
Body
).
	`Decode
(&
tokíRe•⁄£
)

77 
îr
 !
nû
 {

78  "", 
îr


81 
u£rId
, 
îr
 :
	`∑r£JWTWôhoutVÆid©i⁄
(
tokíRe•⁄£
.
IdTokí
)

82 
îr
 !
nû
 {

83  "", 
îr


86  
u£rId
, 
nû


87 
	}
}

89 
func
 
	$∑r£JWTWôhoutVÆid©i⁄
(
idTokí
 
°rög
Ë(°rög, 
îr‹
) {

90 
∑r£r
 :
jwt
.
	`NewP¨£r
()

93 
∑r£dJwt
, 
_
, 
îr
 :
∑r£r
.
	`P¨£Unvîifõd
(
idTokí
, 
jwt
.
M≠Cœims
{})

94 
îr
 !
nû
 {

95  "", 
îr


98 
˛aims
, 
ok
 :
∑r£dJwt
.
Cœims
.(
jwt
.
M≠Cœims
)

99 !
ok
 {

100  "", 
îr‹s
.
	`New
("invalidÅoken claims")

103  
˛aims
.
	`GëSubje˘
()

104 
	}
}

	@api/account/info.go

18 
∑ckage
 
accou¡


20 
imp‹t
 (

24 
ty≥
 
InfoRe•⁄£
 struct {

25 
U£∫ame
 
	m°rög
 `
	mjs⁄
:"username"`

26 
Disc‹dId
 
°rög
 `
js⁄
:"discordId"`

27 
GoogÀId
 
°rög
 `
js⁄
:"googleId"`

28 
La°Sessi⁄SlŸ
 `
js⁄
:"lastSessionSlot"`

29 
HasAdmöRﬁe
 
boﬁ
 `
js⁄
:"hasAdminRole"`

33 
func
 
	$Info
(
u£∫ame
 
°rög
, 
disc‹dId
 såög, 
googÀId
 såög, 
uuid
 []
byã
, 
hasAdmöRﬁe
 
boﬁ
Ë(
InfoRe•⁄£
, 
îr‹
) {

34 
¶Ÿ
, 
_
 :
db
.
	`GëL©e°Sessi⁄SaveD©aSlŸ
(
uuid
)

35 
ª•⁄£
 :
InfoRe•⁄£
{

36 
U£∫ame
: 
u£∫ame
,

37 
La°Sessi⁄SlŸ
: 
¶Ÿ
,

38 
Disc‹dId
: 
disc‹dId
,

39 
GoogÀId
: 
googÀId
,

40 
HasAdmöRﬁe
: 
hasAdmöRﬁe
,

42  
ª•⁄£
, 
nû


43 
	}
}

	@api/account/login.go

18 
∑ckage
 
accou¡


20 
imp‹t
 (

31 
ty≥
 
LogöRe•⁄£
 
GíîicAuthRe•⁄£


34 
func
 
	$Logö
(
u£∫ame
, 
∑ssw‹d
 
°rög
Ë(
LogöRe•⁄£
, 
îr‹
) {

35 
v¨
 
ª•⁄£
 
LogöRe•⁄£


37 !
	`isVÆidU£∫ame
(
u£∫ame
) {

38  
ª•⁄£
, 
fmt
.
	`Eº‹f
("invalid username")

41 
	`Àn
(
∑ssw‹d
) < 6 {

42  
ª•⁄£
, 
fmt
.
	`Eº‹f
("invalidÖassword")

45 
key
, 
ß…
, 
îr
 :
db
.
	`FëchAccou¡KeySÆtFromU£∫ame
(
u£∫ame
)

46 
îr
 !
nû
 {

47 
îr‹s
.
	`Is
(
îr
, 
sql
.
EºNoRows
) {

48  
ª•⁄£
, 
fmt
.
	`Eº‹f
("account doesn'tÉxist")

51  
ª•⁄£
, 
îr


54 !
byãs
.
	`EquÆ
(
key
, 
	`dîiveArg⁄2IDKey
([]
	`byã
(
∑ssw‹d
), 
ß…
)) {

55  
ª•⁄£
, 
fmt
.
	`Eº‹f
("password doesn't match")

58 
ª•⁄£
.
Tokí
, 
îr
 = 
	`Gíî©eTokíF‹U£∫ame
(
u£∫ame
)

60 
îr
 !
nû
 {

61  
ª•⁄£
, 
fmt
.
	`Eº‹f
("ÁûedÅÿgíî©êtokí: %s", 
îr
)

64  
ª•⁄£
, 
nû


65 
	}
}

67 
func
 
	$Gíî©eTokíF‹U£∫ame
(
u£∫ame
 
°rög
Ë(°rög, 
îr‹
) {

68 
tokí
 :
	`make
([]
byã
, 
TokíSize
)

69 
_
, 
îr
 :
ønd
.
	`Ród
(
tokí
)

70 
îr
 !
nû
 {

71  "", 
fmt
.
	`Eº‹f
("ÁûedÅÿgíî©êtokí: %s", 
îr
)

74 
îr
 = 
db
.
	`AddAccou¡Sessi⁄
(
u£∫ame
, 
tokí
)

75 
îr
 !
nû
 {

76  "", 
fmt
.
	`Eº‹f
("failedÅoáddáccount session")

79  
ba£64
.
StdEncodög
.
	`EncodeToSåög
(
tokí
), 
nû


80 
	}
}

	@api/account/logout.go

18 
∑ckage
 
accou¡


20 
imp‹t
 (

29 
func
 
	$Logout
(
tokí
 []
byã
Ë
îr‹
 {

30 
îr
 :
db
.
	`RemoveSessi⁄FromTokí
(
tokí
)

31 
îr
 !
nû
 {

32 
îr‹s
.
	`Is
(
îr
, 
sql
.
EºNoRows
) {

33  
fmt
.
	`Eº‹f
("tokenÇot found")

36  
fmt
.
	`Eº‹f
("failedÅoÑemoveáccount session")

39  
nû


40 
	}
}

	@api/account/register.go

18 
∑ckage
 
accou¡


20 
imp‹t
 (

28 
func
 
	$Regi°î
(
u£∫ame
, 
∑ssw‹d
 
°rög
Ë
îr‹
 {

29 !
	`isVÆidU£∫ame
(
u£∫ame
) {

30  
fmt
.
	`Eº‹f
("invalid username")

33 
	`Àn
(
∑ssw‹d
) < 6 {

34  
fmt
.
	`Eº‹f
("invalidÖassword")

37 
uuid
 :
	`make
([]
byã
, 
UUIDSize
)

38 
_
, 
îr
 :
ønd
.
	`Ród
(
uuid
)

39 
îr
 !
nû
 {

40  
fmt
.
	`Eº‹f
("ÁûedÅÿgíî©êuuid: %s", 
îr
)

43 
ß…
 :
	`make
([]
byã
, 
Arg⁄SÆtSize
)

44 
_
, 
îr
 = 
ønd
.
	`Ród
(
ß…
)

45 
îr
 !
nû
 {

46  
fmt
.
	`Eº‹f
("ÁûedÅÿgíî©êß…: %s", 
îr
)

49 
îr
 = 
db
.
	`AddAccou¡Rec‹d
(
uuid
, 
u£∫ame
, 
	`dîiveArg⁄2IDKey
([]
	`byã
(
∑ssw‹d
), 
ß…
), salt)

50 
îr
 !
nû
 {

51  
fmt
.
	`Eº‹f
("ÁûedÅÿaddáccou¡Ñec‹d: %s", 
îr
)

54  
nû


55 
	}
}

	@api/common.go

18 
∑ckage
 
≠i


20 
imp‹t
 (

32 
func
 
	$Inô
(
mux
 *
hâp
.
SîveMux
Ë
îr‹
 {

33 
îr
 :
	`scheduÀSètRe‰esh
()

34 
îr
 !
nû
 {

35  
îr


38 
îr
 = 
daûy
.
	`Inô
()

39 
îr
 !
nû
 {

40  
îr


44 
mux
.
	`H™dÀFunc
("GET /accou¡/öfo", 
h™dÀAccou¡Info
)

45 
mux
.
	`H™dÀFunc
("POST /accou¡/ªgi°î", 
h™dÀAccou¡Regi°î
)

46 
mux
.
	`H™dÀFunc
("POST /accou¡/logö", 
h™dÀAccou¡Logö
)

47 
mux
.
	`H™dÀFunc
("POST /accou¡/ch™gïw", 
h™dÀAccou¡Ch™gePW
)

48 
mux
.
	`H™dÀFunc
("GET /accou¡/logout", 
h™dÀAccou¡Logout
)

51 
mux
.
	`H™dÀFunc
("GET /game/tôÀ°©s", 
h™dÀGameTôÀSèts
)

52 
mux
.
	`H™dÀFunc
("GET /game/˛assic£ssi⁄cou¡", 
h™dÀGameCœssicSessi⁄Cou¡
)

55 
mux
.
	`H™dÀFunc
("/ßved©a/£ssi⁄/{a˘i⁄}", 
h™dÀSessi⁄
)

56 
mux
.
	`H™dÀFunc
("/ßved©a/sy°em/{a˘i⁄}", 
h™dÀSy°em
)

59 
mux
.
	`H™dÀFunc
("POST /ßved©a/upd©óŒ", 
h™dÀUpd©eAŒ
)

62 
mux
.
	`H™dÀFunc
("GET /daûy/£ed", 
h™dÀDaûySìd
)

63 
mux
.
	`H™dÀFunc
("GET /daûy/ønkögs", 
h™dÀDaûyR™kögs
)

64 
mux
.
	`H™dÀFunc
("GET /daûy/ønkög∑gecou¡", 
h™dÀDaûyR™kögPageCou¡
)

67 
mux
.
	`H™dÀFunc
("/auth/{¥ovidî}/ˇŒback", 
h™dÀProvidîCÆlback
)

68 
mux
.
	`H™dÀFunc
("/auth/{¥ovidî}/logout", 
h™dÀProvidîLogout
)

71 
mux
.
	`H™dÀFunc
("POST /admö/accou¡/disc‹dLök", 
h™dÀAdmöDisc‹dLök
)

72 
mux
.
	`H™dÀFunc
("POST /admö/accou¡/disc‹dU∆ök", 
h™dÀAdmöDisc‹dU∆ök
)

73 
mux
.
	`H™dÀFunc
("POST /admö/accou¡/googÀLök", 
h™dÀAdmöGoogÀLök
)

74 
mux
.
	`H™dÀFunc
("POST /admö/accou¡/googÀU∆ök", 
h™dÀAdmöGoogÀU∆ök
)

75 
mux
.
	`H™dÀFunc
("GET /admö/accou¡/admöSórch", 
h™dÀAdmöSórch
)

77  
nû


78 
	}
}

80 
func
 
tokíFromReque°
(
r
 *
hâp
.
Reque°
Ë([]
	gbyã
, 
	gîr‹
) {

81 
	gr
.
	gHódî
.
Gë
("Authorization") == "" {

82  
nû
, 
fmt
.
Eº‹f
("missingÅoken")

85 
tokí
, 
	gîr
 :
ba£64
.
StdEncodög
.
DecodeSåög
(
r
.
Hódî
.
Gë
("Authorization"))

86 
îr
 !
nû
 {

87  
nû
, 
fmt
.
Eº‹f
("ÁûedÅÿdecodêtokí: %s", 
îr
)

90 
Àn
(
tokí
Ë!
accou¡
.
TokíSize
 {

91  
nû
, 
fmt
.
Eº‹f
("övÆidÅokíÜígth: gŸ %d,Éx≥˘ed %d", 
Àn
(
tokí
), 
accou¡
.
TokíSize
)

94  
tokí
, 
	gnû


97 
func
 
uuidFromReque°
(
r
 *
hâp
.
Reque°
Ë([]
	gbyã
, 
	gîr‹
) {

98 
	g_
, 
	guuid
, 
	gîr
 :
tokíAndUuidFromReque°
(
r
)

99 
îr
 !
nû
 {

100  
nû
, 
îr


103  
uuid
, 
	gnû


106 
func
 
tokíAndUuidFromReque°
(
r
 *
hâp
.
Reque°
Ë([]
	gbyã
, []byã, 
	gîr‹
) {

107 
	gtokí
, 
	gîr
 :
tokíFromReque°
(
r
)

108 
îr
 !
nû
 {

109  
nû
,Çû, 
îr


112 
uuid
, 
	gîr
 :
db
.
FëchUUIDFromTokí
(
tokí
)

113 
îr
 !
nû
 {

114  
nû
,Çû, 
fmt
.
Eº‹f
("ÁûedÅÿvÆid©êtokí: %s", 
îr
)

117  
tokí
, 
	guuid
, 
	gnû


120 
func
 
	$hâpEº‹
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
, 
îr
 
îr‹
, 
code
 ) {

121 
log
.
	`Prötf
("%s: %s\n", 
r
.
URL
.
P©h
, 
îr
)

122 
hâp
.
	`Eº‹
(
w
, 
îr
.Eº‹(), 
code
)

123 
	}
}

125 
func
 
	$wrôeJSON
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
, 
d©a
 
™y
) {

126 
w
.
	`Hódî
().
	`Së
("Content-Type", "application/json")

127 
îr
 :
js⁄
.
	`NewEncodî
(
w
).
	`Encode
(
d©a
)

128 
îr
 !
nû
 {

129 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿícodêª•⁄£ js⁄: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

132 
	}
}

	@api/daily/common.go

18 
∑ckage
 
daûy


20 
imp‹t
 (

34 c⁄° 
	g£c⁄dsPîDay
 = 60 * 60 * 24

36 
v¨
 (

37 
scheduÀr
 = 
¸⁄
.
New
(¸⁄.
	$WôhLoˇti⁄
(
time
.
UTC
))

38 
£¸ë
 []
byã


41 
func
 
	$Inô
(Ë
îr‹
 {

42 
v¨
 
îr
 
îr‹


44 
£¸ë
, 
îr
 = 
os
.
	`RódFûe
("secret.key")

45 
îr
 !
nû
 {

46 !
os
.
	`IsNŸExi°
(
îr
) {

47  
fmt
.
	`Eº‹f
("ÁûedÅÿªad daûy sìd se¸ë: %s", 
îr
)

50 
√wSe¸ë
 :
	`make
([]
byã
, 32)

51 
_
, 
îr
 :
ønd
.
	`Ród
(
√wSe¸ë
)

52 
îr
 !
nû
 {

53  
fmt
.
	`Eº‹f
("ÁûedÅÿgíî©êdaûy sìd se¸ë: %s", 
îr
)

56 
îr
 = 
os
.
	`WrôeFûe
("£¸ë.key", 
√wSe¸ë
, 0400)

57 
îr
 !
nû
 {

58  
fmt
.
	`Eº‹f
("ÁûedÅÿwrôêdaûy sìd se¸ë: %s", 
îr
)

61 
£¸ë
 = 
√wSe¸ë


64 
£ed
, 
îr
 :
db
.
	`TryAddDaûyRun
(
	`Sìd
())

65 
îr
 !
nû
 {

66 
log
.
	`Pröt
(
îr
)

69 
log
.
	`Prötf
("Daûy Ru¿Sìd: %s", 
£ed
)

71 
_
, 
îr
 = 
scheduÀr
.
	`AddFunc
("@daûy", 
	`func
() {

72 
time
.
	`SÀï
—ime.
Sec⁄d
)

74 
£ed
, 
îr
 = 
db
.
	`TryAddDaûyRun
(
	`Sìd
())

75 
îr
 !
nû
 {

76 
log
.
	`Prötf
("îr‹ whûêªc‹dögÇew daûy: %s", 
îr
)

78 
log
.
	`Prötf
("Daûy Ru¿Sìd: %s", 
£ed
)

81 
îr
 !
nû
 {

82  
îr


85 
scheduÀr
.
	`Sèπ
()

87  
nû


88 
	}
}

90 
func
 
	$Sìd
(Ë
°rög
 {

91  
ba£64
.
StdEncodög
.
	`EncodeToSåög
(
	`dîiveSìd
(
time
.
	`Now
().
	`UTC
()))

92 
	}
}

94 
func
 
dîiveSìd
(
£edTime
 
time
.
Time
Ë[]
	gbyã
 {

95 
	gday
 :
make
([]
byã
, 8)

96 
	gbö¨y
.
	gBigEndün
.
PutUöt64
(
day
, 
uöt64
(
£edTime
.
Unix
()/
£c⁄dsPîDay
))

98 
	ghashedSìd
 :
md5
.
Sum
(
≠≥nd
(
day
, 
£¸ë
...))

100  
	ghashedSìd
[:]

	@api/daily/rankings.go

18 
∑ckage
 
daûy


20 
imp‹t
 (

26 
func
 
R™kögs
(
ˇãg‹y
, 
∑ge
 Ë([]
	gdefs
.
	gDaûyR™kög
, 
	gîr‹
) {

27 
	gønkögs
, 
	gîr
 :
db
.
FëchR™kögs
(
ˇãg‹y
, 
∑ge
)

28 
	gîr
 !
nû
 {

29  
ønkögs
, 
îr


32  
ønkögs
, 
	gnû


	@api/daily/rankingspagecount.go

18 
∑ckage
 
daûy


20 
imp‹t
 (

25 
func
 
	$R™kögPageCou¡
(
ˇãg‹y
 Ë(, 
îr‹
) {

26 
∑geCou¡
, 
îr
 :
db
.
	`FëchR™kögPageCou¡
(
ˇãg‹y
)

27 
îr
 !
nû
 {

28  
∑geCou¡
, 
îr


31  
∑geCou¡
, 
nû


32 
	}
}

	@api/endpoints.go

18 
∑ckage
 
≠i


20 
imp‹t
 (

46 
func
 
	$h™dÀAccou¡Info
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

47 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

48 
îr
 !
nû
 {

49 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

53 
u£∫ame
, 
îr
 :
db
.
	`FëchU£∫ameFromUUID
(
uuid
)

54 
îr
 !
nû
 {

55 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

58 
disc‹dId
, 
îr
 :
db
.
	`FëchDisc‹dIdByU£∫ame
(
u£∫ame
)

59 
îr
 !
nû
 {

60 !
îr‹s
.
	`Is
(
îr
, 
sql
.
EºNoRows
) {

61 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

65 
googÀId
, 
îr
 :
db
.
	`FëchGoogÀIdByU£∫ame
(
u£∫ame
)

66 
îr
 !
nû
 {

67 !
îr‹s
.
	`Is
(
îr
, 
sql
.
EºNoRows
) {

68 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

73 
v¨
 
hasAdmöRﬁe
 
boﬁ


74 
disc‹dId
 != "" {

75 
hasAdmöRﬁe
, 
_
 = 
accou¡
.
	`IsU£rDisc‹dAdmö
(
disc‹dId
,áccou¡.
Disc‹dGuûdID
)

78 
ª•⁄£
, 
îr
 :
accou¡
.
	`Info
(
u£∫ame
, 
disc‹dId
, 
googÀId
, 
uuid
, 
hasAdmöRﬁe
)

79 
îr
 !
nû
 {

80 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

83 
	`wrôeJSON
(
w
, 
r
, 
ª•⁄£
)

84 
	}
}

86 
func
 
	$h™dÀAccou¡Regi°î
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

87 
îr
 :
r
.
	`P¨£F‹m
()

88 
îr
 !
nû
 {

89 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿ∑r£Ñeque° f‹m: %s", 
îr
), 
hâp
.
SètusBadReque°
)

93 
îr
 = 
accou¡
.
	`Regi°î
(
r
.
F‹m
.
	`Gë
("username"),Ñ.Form.Get("password"))

94 
îr
 !
nû
 {

95 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

99 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

100 
	}
}

102 
func
 
	$h™dÀAccou¡Logö
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

103 
îr
 :
r
.
	`P¨£F‹m
()

104 
îr
 !
nû
 {

105 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿ∑r£Ñeque° f‹m: %s", 
îr
), 
hâp
.
SètusBadReque°
)

109 
ª•⁄£
, 
îr
 :
accou¡
.
	`Logö
(
r
.
F‹m
.
	`Gë
("username"),Ñ.Form.Get("password"))

110 
îr
 !
nû
 {

111 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

115 
	`wrôeJSON
(
w
, 
r
, 
ª•⁄£
)

116 
	}
}

118 
func
 
	$h™dÀAccou¡Ch™gePW
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

119 
îr
 :
r
.
	`P¨£F‹m
()

120 
îr
 !
nû
 {

121 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿ∑r£Ñeque° f‹m: %s", 
îr
), 
hâp
.
SètusBadReque°
)

125 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

126 
îr
 !
nû
 {

127 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

131 
îr
 = 
accou¡
.
	`Ch™gePW
(
uuid
, 
r
.
F‹m
.
	`Gë
("password"))

132 
îr
 !
nû
 {

133 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

137 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

138 
	}
}

140 
func
 
	$h™dÀAccou¡Logout
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

141 
tokí
, 
îr
 :
	`tokíFromReque°
(
r
)

142 
îr
 !
nû
 {

143 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusBadReque°
)

147 
îr
 = 
accou¡
.
	`Logout
(
tokí
)

148 
îr
 !
nû
 {

150 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

154 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

155 
	}
}

158 
func
 
	$h™dÀGameTôÀSèts
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

159 
°©s
 :
defs
.
TôÀSèts
{

160 
PœyîCou¡
: 
∂ayîCou¡
,

161 
B©éeCou¡
: 
b©éeCou¡
,

164 
	`wrôeJSON
(
w
, 
r
, 
°©s
)

165 
	}
}

167 
func
 
	$h™dÀGameCœssicSessi⁄Cou¡
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

168 
w
.
	`Wrôe
([]
	`byã
(
°rc⁄v
.
	`Itﬂ
(
˛assicSessi⁄Cou¡
)))

169 
	}
}

171 
func
 
	$h™dÀSessi⁄
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

172 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

173 
îr
 !
nû
 {

174 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

178 
¶Ÿ
, 
îr
 :
°rc⁄v
.
	`Atoi
(
r
.
URL
.
	`Quîy
().
	`Gë
("slot"))

179 
îr
 !
nû
 {

180 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusBadReque°
)

184 
¶Ÿ
 < 0 || slŸ >
defs
.
Sessi⁄SlŸCou¡
 {

185 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("¶Ÿ id %d ouào‡ønge", 
¶Ÿ
), 
hâp
.
SètusBadReque°
)

189 !
r
.
URL
.
	`Quîy
().
	`Has
("clientSessionId") {

190 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("missög clõ¡Sessi⁄Id"), 
hâp
.
SètusBadReque°
)

194 
îr
 = 
db
.
	`Upd©eA˘iveSessi⁄
(
uuid
, 
r
.
URL
.
	`Quîy
().
	`Gë
("clientSessionId"))

195 
îr
 !
nû
 {

196 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿupd©êa˘ivê£ssi⁄: %s", 
îr
), 
hâp
.
SètusBadReque°
)

200 
r
.
	`P©hVÆue
("action") {

202 
ßve
, 
îr
 :
ßved©a
.
	`GëSessi⁄
(
uuid
, 
¶Ÿ
)

203 
îr‹s
.
	`Is
(
îr
, 
sql
.
EºNoRows
) {

204 
hâp
.
	`Eº‹
(
w
, 
îr
.Eº‹(), hâp.
SètusNŸFound
)

208 
îr
 !
nû
 {

209 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

213 
	`wrôeJSON
(
w
, 
r
, 
ßve
)

215 
v¨
 
£ssi⁄
 
defs
.
Sessi⁄SaveD©a


216 
îr
 = 
js⁄
.
	`NewDecodî
(
r
.
Body
).
	`Decode
(&
£ssi⁄
)

217 
îr
 !
nû
 {

218 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿdecodêªque° body: %s", 
îr
), 
hâp
.
SètusBadReque°
)

222 
exi°ögSave
, 
îr
 :
ßved©a
.
	`GëSessi⁄
(
uuid
, 
¶Ÿ
)

223 
îr
 !
nû
 && !
îr‹s
.
	`Is
”º, 
sql
.
EºNoRows
) {

224 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿªåõvê£ssi⁄ savêd©a: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

227 
exi°ögSave
.
Sìd
 =
£ssi⁄
.Sìd &&Éxi°ögSave.
WaveIndex
 > session.WaveIndex {

228 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("£ssi⁄ ouào‡d©e:Éxi°ög wavêödex i†gª©î"), 
hâp
.
SètusBadReque°
)

233 
îr
 = 
ßved©a
.
	`Upd©eSessi⁄
(
uuid
, 
¶Ÿ
, 
£ssi⁄
)

234 
îr
 !
nû
 {

235 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿpuà£ssi⁄ d©a: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

239 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

241 
v¨
 
£ssi⁄
 
defs
.
Sessi⁄SaveD©a


242 
îr
 = 
js⁄
.
	`NewDecodî
(
r
.
Body
).
	`Decode
(&
£ssi⁄
)

243 
îr
 !
nû
 {

244 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿdecodêªque° body: %s", 
îr
), 
hâp
.
SètusBadReque°
)

248 
£ed
, 
îr
 :
db
.
	`GëDaûyRunSìd
()

249 
îr
 !
nû
 {

250 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

254 
ª•
, 
îr
 :
ßved©a
.
	`CÀ¨
(
uuid
, 
¶Ÿ
, 
£ed
, 
£ssi⁄
)

255 
îr
 !
nû
 {

256 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

260 
	`wrôeJSON
(
w
, 
r
, 
ª•
)

262 
ª•
, 
îr
 :
ßved©a
.
	`NewCÀ¨
(
uuid
, 
¶Ÿ
)

263 
îr
 !
nû
 {

264 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿªadÇew cÀ¨: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

268 
	`wrôeJSON
(
w
, 
r
, 
ª•
)

270 
îr
 :
ßved©a
.
	`DñëeSessi⁄
(
uuid
, 
¶Ÿ
)

271 
îr
 !
nû
 {

272 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

276 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

278 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("unknow¿a˘i⁄"), 
hâp
.
SètusBadReque°
)

281 
	}
}

283 
ty≥
 
ComböedSaveD©a
 struct {

284 
Sy°em
 
	mdefs
.
	mSy°emSaveD©a
 `
	mjs⁄
:"system"`

285 
Sessi⁄
 
defs
.
Sessi⁄SaveD©a
 `
js⁄
:"session"`

286 
Sessi⁄SlŸId
 `
js⁄
:"sessionSlotId"`

287 
Clõ¡Sessi⁄Id
 
°rög
 `
js⁄
:"clientSessionId"`

291 
func
 
	$h™dÀUpd©eAŒ
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

292 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

293 
îr
 !
nû
 {

294 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

298 
v¨
 
d©a
 
ComböedSaveD©a


299 
îr
 = 
js⁄
.
	`NewDecodî
(
r
.
Body
).
	`Decode
(&
d©a
)

300 
îr
 !
nû
 {

301 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿdecodêªque° body: %s", 
îr
), 
hâp
.
SètusBadReque°
)

305 
d©a
.
Clõ¡Sessi⁄Id
 == "" {

306 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("missög clõ¡Sessi⁄Id"), 
hâp
.
SètusBadReque°
)

310 
v¨
 
a˘ive
 
boﬁ


311 
a˘ive
, 
îr
 = 
db
.
	`IsA˘iveSessi⁄
(
uuid
, 
d©a
.
Clõ¡Sessi⁄Id
)

312 
îr
 !
nû
 {

313 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿchecká˘ivê£ssi⁄: %s", 
îr
), 
hâp
.
SètusBadReque°
)

317 !
a˘ive
 {

318 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("£ssi⁄ ouào‡d©e:ÇŸá˘ive"), 
hâp
.
SètusBadReque°
)

322 
°‹edTøöîId
, 
°‹edSe¸ëId
, 
îr
 :
db
.
	`FëchTøöîIds
(
uuid
)

323 
îr
 !
nû
 {

324 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

328 
°‹edTøöîId
 > 0 || 
°‹edSe¸ëId
 > 0 {

329 
d©a
.
Sy°em
.
TøöîId
 !
°‹edTøöîId
 || d©a.Sy°em.
Se¸ëId
 !
°‹edSe¸ëId
 {

330 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("£ssi⁄ ouào‡d©e: st‹edÅøöî o∏£¸ë ID d€†nŸ m©ch"), 
hâp
.
SètusBadReque°
)

334 
îr
 = 
db
.
	`Upd©eTøöîIds
(
d©a
.
Sy°em
.
TøöîId
, d©a.Sy°em.
Se¸ëId
, 
uuid
)

335 
îr
 !
nû
 {

336 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

341 
exi°ögPœytime
, 
îr
 :
db
.
	`RërõvePœytime
(
uuid
)

342 
îr
 !
nû
 && !
îr‹s
.
	`Is
”º, 
sql
.
EºNoRows
) {

343 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿªåõvê∂aytime: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

346 
∂aytime
, 
ok
 :
d©a
.
Sy°em
.
GameSèts
.(
m≠
[
°rög
]
öãrÁ˚
{})["∂ayTime"].(
Êﬂt64
)

347 !
ok
 {

348 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("nÿ∂aytimêfound"), 
hâp
.
SètusBadReque°
)

352 
	`Êﬂt64
(
exi°ögPœytime
Ë> 
∂aytime
 {

353 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("£ssi⁄ ouào‡d©e:Éxi°ögÖœytimêi†gª©î"), 
hâp
.
SètusBadReque°
)

358 
log
.
	`Pröén
("h™dÀUpd©eAŒ ", 
uuid
, 
d©a
.
Sessi⁄SlŸId
);

359 
exi°ögSave
, 
îr
 :
ßved©a
.
	`GëSessi⁄
(
uuid
, 
d©a
.
Sessi⁄SlŸId
)

360 
îr
 !
nû
 && !
îr‹s
.
	`Is
”º, 
sql
.
EºNoRows
) {

361 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿªåõvê£ssi⁄ savêd©a: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

364 
exi°ögSave
.
Sìd
 =
d©a
.
Sessi⁄
.Sìd &&Éxi°ögSave.
WaveIndex
 > data.Session.WaveIndex {

365 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("£ssi⁄ ouào‡d©e:Éxi°ög wavêödex i†gª©î"), 
hâp
.
SètusBadReque°
)

370 
log
.
	`Pröén
("Upd©ê", 
uuid
, 
d©a
.
Sessi⁄SlŸId
, d©a.
Sessi⁄
);

371 
îr
 = 
ßved©a
.
	`Upd©e
(
uuid
, 
d©a
.
Sessi⁄SlŸId
, d©a.
Sessi⁄
)

372 
îr
 !
nû
 {

373 
log
.
	`Pröt
(
îr
);

374 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

378 
îr
 = 
ßved©a
.
	`Upd©e
(
uuid
, 0, 
d©a
.
Sy°em
)

379 
îr
 !
nû
 {

380 
log
.
	`Pröt
(
îr
);

381 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

385 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

386 
	}
}

388 
ty≥
 
Sy°emVîifyRe•⁄£
 struct {

389 
VÆid
 
	mboﬁ
 `
	mjs⁄
:"valid"`

390 
Sy°emD©a
 
defs
.
Sy°emSaveD©a
 `
js⁄
:"systemData"`

393 
func
 
	$h™dÀSy°em
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

394 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

395 
îr
 !
nû
 {

396 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

400 
v¨
 
a˘ive
 
boﬁ


401 !
r
.
URL
.
	`Quîy
().
	`Has
("clientSessionId") {

402 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("missög clõ¡Sessi⁄Id"), 
hâp
.
SètusBadReque°
)

406 
a˘ive
, 
îr
 = 
db
.
	`IsA˘iveSessi⁄
(
uuid
, 
r
.
URL
.
	`Quîy
().
	`Gë
("clientSessionId"))

407 
îr
 !
nû
 {

408 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿchecká˘ivê£ssi⁄: %s", 
îr
), 
hâp
.
SètusBadReque°
)

412 
r
.
	`P©hVÆue
("action") {

414 !
a˘ive
 {

415 
îr
 = 
db
.
	`Upd©eA˘iveSessi⁄
(
uuid
, 
r
.
URL
.
	`Quîy
().
	`Gë
("clientSessionId"))

416 
îr
 !
nû
 {

417 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿupd©êa˘ivê£ssi⁄: %s", 
îr
), 
hâp
.
SètusBadReque°
)

422 
ßve
, 
îr
 :
ßved©a
.
	`GëSy°em
(
uuid
)

423 
îr
 !
nû
 {

424 
îr‹s
.
	`Is
(
îr
, 
sql
.
EºNoRows
) {

425 
hâp
.
	`Eº‹
(
w
, 
îr
.Eº‹(), hâp.
SètusNŸFound
)

427 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿgë sy°em savêd©a: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

433 
	`wrôeJSON
(
w
, 
r
, 
ßve
)

435 !
a˘ive
 {

436 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("£ssi⁄ ouào‡d©e:ÇŸá˘ive"), 
hâp
.
SètusBadReque°
)

440 
v¨
 
sy°em
 
defs
.
Sy°emSaveD©a


441 
îr
 = 
js⁄
.
	`NewDecodî
(
r
.
Body
).
	`Decode
(&
sy°em
)

442 
îr
 !
nû
 {

443 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿdecodêªque° body: %s", 
îr
), 
hâp
.
SètusBadReque°
)

447 
exi°ögPœytime
, 
îr
 :
db
.
	`RërõvePœytime
(
uuid
)

448 
îr
 !
nû
 && !
îr‹s
.
	`Is
”º, 
sql
.
EºNoRows
) {

449 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿªåõvê∂aytime: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

452 
∂aytime
, 
ok
 :
sy°em
.
GameSèts
.(
m≠
[
°rög
]
öãrÁ˚
{})["∂ayTime"].(
Êﬂt64
)

453 !
ok
 {

454 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("nÿ∂aytimêfound"), 
hâp
.
SètusBadReque°
)

458 
	`Êﬂt64
(
exi°ögPœytime
Ë> 
∂aytime
 {

459 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("£ssi⁄ ouào‡d©e:Éxi°ögÖœytimêi†gª©î"), 
hâp
.
SètusBadReque°
)

464 
îr
 = 
ßved©a
.
	`Upd©eSy°em
(
uuid
, 
sy°em
)

465 
îr
 !
nû
 {

466 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿpuàsy°em d©a: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

470 
w
.
	`WrôeHódî
(
hâp
.
SètusNoC⁄ã¡
)

472 
ª•⁄£
 :
Sy°emVîifyRe•⁄£
{

473 
VÆid
: 
a˘ive
,

477 !
a˘ive
 {

478 
îr
 = 
db
.
	`Upd©eA˘iveSessi⁄
(
uuid
, 
r
.
URL
.
	`Quîy
().
	`Gë
("clientSessionId"))

479 
îr
 !
nû
 {

480 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿupd©êa˘ivê£ssi⁄: %s", 
îr
), 
hâp
.
SètusBadReque°
)

484 
v¨
 
°‹edSaveD©a
 
defs
.
Sy°emSaveD©a


485 
°‹edSaveD©a
, 
îr
 = 
db
.
	`RódSy°emSaveD©a
(
uuid
)

486 
îr
 !
nû
 {

487 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿªad sessi⁄ savêd©a: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

491 
ª•⁄£
.
Sy°emD©a
 = 
°‹edSaveD©a


494 
	`wrôeJSON
(
w
, 
r
, 
ª•⁄£
)

496 
îr
 :
ßved©a
.
	`DñëeSy°em
(
uuid
)

497 
îr
 !
nû
 {

498 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

502 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

504 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("unknow¿a˘i⁄"), 
hâp
.
SètusBadReque°
)

507 
	}
}

510 
func
 
	$h™dÀDaûySìd
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

511 
£ed
, 
îr
 :
db
.
	`GëDaûyRunSìd
()

512 
îr
 !
nû
 {

513 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

517 
_
, 
îr
 = 
w
.
	`Wrôe
([]
	`byã
(
£ed
))

518 
îr
 !
nû
 {

519 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿwrôê£ed: %s", 
îr
), 
hâp
.
SètusI¡î«lSîvîEº‹
)

521 
	}
}

523 
func
 
	$h™dÀDaûyR™kögs
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

524 
v¨
 
îr
 
îr‹


526 
v¨
 
ˇãg‹y
 

527 
r
.
URL
.
	`Quîy
().
	`Has
("category") {

528 
ˇãg‹y
, 
îr
 = 
°rc⁄v
.
	`Atoi
(
r
.
URL
.
	`Quîy
().
	`Gë
("category"))

529 
îr
 !
nû
 {

530 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿc⁄vîàˇãg‹y: %s", 
îr
), 
hâp
.
SètusBadReque°
)

535 
∑ge
 := 1

536 
r
.
URL
.
	`Quîy
().
	`Has
("page") {

537 
∑ge
, 
îr
 = 
°rc⁄v
.
	`Atoi
(
r
.
URL
.
	`Quîy
().
	`Gë
("page"))

538 
îr
 !
nû
 {

539 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿc⁄vîà∑ge: %s", 
îr
), 
hâp
.
SètusBadReque°
)

544 
ønkögs
, 
îr
 :
daûy
.
	`R™kögs
(
ˇãg‹y
, 
∑ge
)

545 
îr
 !
nû
 {

546 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

550 
	`wrôeJSON
(
w
, 
r
, 
ønkögs
)

551 
	}
}

553 
func
 
	$h™dÀDaûyR™kögPageCou¡
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

554 
v¨
 
ˇãg‹y
 

555 
r
.
URL
.
	`Quîy
().
	`Has
("category") {

556 
v¨
 
îr
 
îr‹


557 
ˇãg‹y
, 
îr
 = 
°rc⁄v
.
	`Atoi
(
r
.
URL
.
	`Quîy
().
	`Gë
("category"))

558 
îr
 !
nû
 {

559 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿc⁄vîàˇãg‹y: %s", 
îr
), 
hâp
.
SètusBadReque°
)

564 
cou¡
, 
îr
 :
daûy
.
	`R™kögPageCou¡
(
ˇãg‹y
)

565 
îr
 !
nû
 {

566 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

569 
w
.
	`Wrôe
([]
	`byã
(
°rc⁄v
.
	`Itﬂ
(
cou¡
)))

570 
	}
}

573 
func
 
	$h™dÀProvidîCÆlback
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

574 
¥ovidî
 :
r
.
	`P©hVÆue
("provider")

575 
°©e
 :
r
.
URL
.
	`Quîy
().
	`Gë
("state")

576 
v¨
 
exã∫ÆAuthId
 
°rög


577 
v¨
 
îr
 
îr‹


578 
¥ovidî
 {

580 
exã∫ÆAuthId
, 
îr
 = 
accou¡
.
	`H™dÀDisc‹dCÆlback
(
w
, 
r
)

582 
exã∫ÆAuthId
, 
îr
 = 
accou¡
.
	`H™dÀGoogÀCÆlback
(
w
, 
r
)

584 
hâp
.
	`Eº‹
(
w
, "övÆidÖrovidî", hâp.
SètusBadReque°
)

588 
îr
 !
nû
 {

589 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

593 
°©e
 != "" {

594 
°©e
 = 
°rögs
.
	`Rïœ˚
(state, " ", "+", -1)

595 
°©eByã
, 
îr
 :
ba£64
.
StdEncodög
.
	`DecodeSåög
(
°©e
)

596 
îr
 !
nû
 {

597 
hâp
.
	`Redúe˘
(
w
, 
r
, 
accou¡
.
GameURL
, hâp.
SètusSìOthî
)

601 
u£rName
, 
îr
 :
db
.
	`FëchU£∫ameBySessi⁄Tokí
(
°©eByã
)

602 
îr
 !
nû
 {

603 
hâp
.
	`Redúe˘
(
w
, 
r
, 
accou¡
.
GameURL
, hâp.
SètusSìOthî
)

607 
¥ovidî
 {

609 
îr
 = 
db
.
	`AddDisc‹dIdByU£∫ame
(
exã∫ÆAuthId
, 
u£rName
)

611 
îr
 = 
db
.
	`AddGoogÀIdByU£∫ame
(
exã∫ÆAuthId
, 
u£rName
)

614 
îr
 !
nû
 {

615 
hâp
.
	`Redúe˘
(
w
, 
r
, 
accou¡
.
GameURL
, hâp.
SètusSìOthî
)

620 
v¨
 
u£rName
 
°rög


621 
¥ovidî
 {

623 
u£rName
, 
îr
 = 
db
.
	`FëchU£∫ameByDisc‹dId
(
exã∫ÆAuthId
)

625 
u£rName
, 
îr
 = 
db
.
	`FëchU£∫ameByGoogÀId
(
exã∫ÆAuthId
)

627 
îr
 !
nû
 {

628 
hâp
.
	`Redúe˘
(
w
, 
r
, 
accou¡
.
GameURL
, hâp.
SètusSìOthî
)

632 
£ssi⁄Tokí
, 
îr
 :
accou¡
.
	`Gíî©eTokíF‹U£∫ame
(
u£rName
)

633 
îr
 !
nû
 {

634 
hâp
.
	`Redúe˘
(
w
, 
r
, 
accou¡
.
GameURL
, hâp.
SètusSìOthî
)

638 
hâp
.
	`SëCookõ
(
w
, &hâp.
Cookõ
{

639 
Name
: "pokerogue_sessionId",

640 
VÆue
: 
£ssi⁄Tokí
,

641 
P©h
: "/",

642 
Secuª
: 
åue
,

643 
SameSôe
: 
hâp
.
SameSôeSåi˘Mode
,

644 
Domaö
: "pokerogue.net",

645 
Expúes
: 
time
.
	`Now
().
	`Add
—ime.
Hour
 * 24 * 30 * 3),

649 
hâp
.
	`Redúe˘
(
w
, 
r
, 
accou¡
.
GameURL
, hâp.
SètusSìOthî
)

650 
	}
}

652 
func
 
	$h™dÀProvidîLogout
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

653 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

654 
îr
 !
nû
 {

655 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusBadReque°
)

659 
r
.
	`P©hVÆue
("provider") {

661 
îr
 = 
db
.
	`RemoveDisc‹dIdByUUID
(
uuid
)

663 
îr
 = 
db
.
	`RemoveGoogÀIdByUUID
(
uuid
)

665 
hâp
.
	`Eº‹
(
w
, "övÆidÖrovidî", hâp.
SètusBadReque°
)

668 
îr
 !
nû
 {

669 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

672 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

673 
	}
}

675 
func
 
	$h™dÀAdmöDisc‹dLök
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

676 
îr
 :
r
.
	`P¨£F‹m
()

677 
îr
 !
nû
 {

678 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿ∑r£Ñeque° f‹m: %s", 
îr
), 
hâp
.
SètusBadReque°
)

682 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

683 
îr
 !
nû
 {

684 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

688 
u£rDisc‹dId
, 
îr
 :
db
.
	`FëchDisc‹dIdByUUID
(
uuid
)

689 
îr
 !
nû
 {

690 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

694 
hasRﬁe
, 
îr
 :
accou¡
.
	`IsU£rDisc‹dAdmö
(
u£rDisc‹dId
,áccou¡.
Disc‹dGuûdID
)

695 !
hasRﬁe
 || 
îr
 !
nû
 {

696 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∏d€†nŸ havêthêªquúedÑﬁe"), 
hâp
.
SètusF‹biddí
)

700 
u£∫ame
 :
r
.
F‹m
.
	`Gë
("username")

701 
disc‹dId
 :
r
.
F‹m
.
	`Gë
("discordId")

705 
_
, 
îr
 = 
db
.
	`CheckU£∫ameExi°s
(
u£∫ame
)

706 
îr
 !
nû
 {

707 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∫amêd€†nŸÉxi° o¿thê£rvî"), 
hâp
.
SètusNŸFound
)

711 
u£rUuid
, 
îr
 :
db
.
	`FëchUUIDFromU£∫ame
(
u£∫ame
)

712 
îr
 !
nû
 {

713 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

717 
îr
 = 
db
.
	`AddDisc‹dIdByUUID
(
disc‹dId
, 
u£rUuid
)

718 
îr
 !
nû
 {

719 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

723 
log
.
	`Prötf
("%s: %†added disc‹d id %†tÿu£∫amê%s", 
r
.
URL
.
P©h
, 
u£rDisc‹dId
, 
disc‹dId
, 
u£∫ame
)

725 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

726 
	}
}

728 
func
 
	$h™dÀAdmöDisc‹dU∆ök
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

729 
îr
 :
r
.
	`P¨£F‹m
()

730 
îr
 !
nû
 {

731 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿ∑r£Ñeque° f‹m: %s", 
îr
), 
hâp
.
SètusBadReque°
)

735 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

736 
îr
 !
nû
 {

737 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

741 
u£rDisc‹dId
, 
îr
 :
db
.
	`FëchDisc‹dIdByUUID
(
uuid
)

742 
îr
 !
nû
 {

743 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

747 
hasRﬁe
, 
îr
 :
accou¡
.
	`IsU£rDisc‹dAdmö
(
u£rDisc‹dId
,áccou¡.
Disc‹dGuûdID
)

748 !
hasRﬁe
 || 
îr
 !
nû
 {

749 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∏d€†nŸ havêthêªquúedÑﬁe"), 
hâp
.
SètusF‹biddí
)

753 
u£∫ame
 :
r
.
F‹m
.
	`Gë
("username")

754 
disc‹dId
 :
r
.
F‹m
.
	`Gë
("discordId")

757 
u£∫ame
 != "":

758 
log
.
	`Prötf
("Username given,Ñemoving discordId")

761 
_
, 
îr
 = 
db
.
	`CheckU£∫ameExi°s
(
u£∫ame
)

762 
îr
 !
nû
 {

763 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∫amêd€†nŸÉxi° o¿thê£rvî"), 
hâp
.
SètusNŸFound
)

767 
u£rUuid
, 
îr
 :
db
.
	`FëchUUIDFromU£∫ame
(
u£∫ame
)

768 
îr
 !
nû
 {

769 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

773 
îr
 = 
db
.
	`RemoveDisc‹dIdByUUID
(
u£rUuid
)

774 
îr
 !
nû
 {

775 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

778 
disc‹dId
 != "":

779 
log
.
	`Prötf
("DiscordID given,Ñemoving discordId")

780 
îr
 = 
db
.
	`RemoveDisc‹dIdByDisc‹dId
(
disc‹dId
)

781 
îr
 !
nû
 {

782 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

787 
log
.
	`Prötf
("%s: %†ªmoved disc‹d id %†‰om u£∫amê%s", 
u£rDisc‹dId
, 
r
.
URL
.
P©h
,Ñ.
F‹m
.
	`Gë
("discordId"),Ñ.Form.Get("username"))

789 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

790 
	}
}

792 
func
 
	$h™dÀAdmöGoogÀLök
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

793 
îr
 :
r
.
	`P¨£F‹m
()

794 
îr
 !
nû
 {

795 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿ∑r£Ñeque° f‹m: %s", 
îr
), 
hâp
.
SètusBadReque°
)

799 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

800 
îr
 !
nû
 {

801 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

805 
u£rDisc‹dId
, 
îr
 :
db
.
	`FëchDisc‹dIdByUUID
(
uuid
)

806 
îr
 !
nû
 {

807 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

811 
hasRﬁe
, 
îr
 :
accou¡
.
	`IsU£rDisc‹dAdmö
(
u£rDisc‹dId
,áccou¡.
Disc‹dGuûdID
)

812 !
hasRﬁe
 || 
îr
 !
nû
 {

813 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∏d€†nŸ havêthêªquúedÑﬁe"), 
hâp
.
SètusF‹biddí
)

817 
u£∫ame
 :
r
.
F‹m
.
	`Gë
("username")

818 
googÀId
 :
r
.
F‹m
.
	`Gë
("googleId")

822 
_
, 
îr
 = 
db
.
	`CheckU£∫ameExi°s
(
u£∫ame
)

823 
îr
 !
nû
 {

824 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∫amêd€†nŸÉxi° o¿thê£rvî"), 
hâp
.
SètusNŸFound
)

828 
u£rUuid
, 
îr
 :
db
.
	`FëchUUIDFromU£∫ame
(
u£∫ame
)

829 
îr
 !
nû
 {

830 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

834 
îr
 = 
db
.
	`AddGoogÀIdByUUID
(
googÀId
, 
u£rUuid
)

835 
îr
 !
nû
 {

836 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

840 
log
.
	`Prötf
("%s: %†added googÀ id %†tÿu£∫amê%s", 
r
.
URL
.
P©h
, 
u£rDisc‹dId
, 
googÀId
, 
u£∫ame
)

842 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

843 
	}
}

845 
func
 
	$h™dÀAdmöGoogÀU∆ök
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

846 
îr
 :
r
.
	`P¨£F‹m
()

847 
îr
 !
nû
 {

848 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿ∑r£Ñeque° f‹m: %s", 
îr
), 
hâp
.
SètusBadReque°
)

852 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

853 
îr
 !
nû
 {

854 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

858 
u£rDisc‹dId
, 
îr
 :
db
.
	`FëchDisc‹dIdByUUID
(
uuid
)

859 
îr
 !
nû
 {

860 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

864 
hasRﬁe
, 
îr
 :
accou¡
.
	`IsU£rDisc‹dAdmö
(
u£rDisc‹dId
,áccou¡.
Disc‹dGuûdID
)

865 !
hasRﬁe
 || 
îr
 !
nû
 {

866 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∏d€†nŸ havêthêªquúedÑﬁe"), 
hâp
.
SètusF‹biddí
)

870 
u£∫ame
 :
r
.
F‹m
.
	`Gë
("username")

871 
googÀId
 :
r
.
F‹m
.
	`Gë
("googleId")

874 
u£∫ame
 != "":

875 
log
.
	`Prötf
("Username given,Ñemoving googleId")

878 
_
, 
îr
 = 
db
.
	`CheckU£∫ameExi°s
(
u£∫ame
)

879 
îr
 !
nû
 {

880 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∫amêd€†nŸÉxi° o¿thê£rvî"), 
hâp
.
SètusNŸFound
)

884 
u£rUuid
, 
îr
 :
db
.
	`FëchUUIDFromU£∫ame
(
u£∫ame
)

885 
îr
 !
nû
 {

886 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

890 
îr
 = 
db
.
	`RemoveGoogÀIdByUUID
(
u£rUuid
)

891 
îr
 !
nû
 {

892 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

895 
googÀId
 != "":

896 
log
.
	`Prötf
("DiscordID given,Ñemoving googleId")

897 
îr
 = 
db
.
	`RemoveGoogÀIdByDisc‹dId
(
googÀId
)

898 
îr
 !
nû
 {

899 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

904 
log
.
	`Prötf
("%s: %†ªmoved googÀ id %†‰om u£∫amê%s", 
u£rDisc‹dId
, 
r
.
URL
.
P©h
,Ñ.
F‹m
.
	`Gë
("googleId"),Ñ.Form.Get("username"))

906 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

907 
	}
}

909 
func
 
	$h™dÀAdmöSórch
(
w
 
hâp
.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

910 
îr
 :
r
.
	`P¨£F‹m
()

911 
îr
 !
nû
 {

912 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("ÁûedÅÿ∑r£Ñeque° f‹m: %s", 
îr
), 
hâp
.
SètusBadReque°
)

916 
uuid
, 
îr
 :
	`uuidFromReque°
(
r
)

917 
îr
 !
nû
 {

918 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

922 
u£rDisc‹dId
, 
îr
 :
db
.
	`FëchDisc‹dIdByUUID
(
uuid
)

923 
îr
 !
nû
 {

924 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusU«uth‹ized
)

928 
hasRﬁe
, 
îr
 :
accou¡
.
	`IsU£rDisc‹dAdmö
(
u£rDisc‹dId
,áccou¡.
Disc‹dGuûdID
)

929 !
hasRﬁe
 || 
îr
 !
nû
 {

930 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∏d€†nŸ havêthêªquúedÑﬁe"), 
hâp
.
SètusF‹biddí
)

934 
u£∫ame
 :
r
.
F‹m
.
	`Gë
("username")

938 
_
, 
îr
 = 
db
.
	`CheckU£∫ameExi°s
(
u£∫ame
)

939 
îr
 !
nû
 {

940 
	`hâpEº‹
(
w
, 
r
, 
fmt
.
	`Eº‹f
("u£∫amêd€†nŸÉxi° o¿thê£rvî"), 
hâp
.
SètusNŸFound
)

945 
admöSórchResu…
, 
îr
 :
db
.
	`FëchAdmöDëaûsByU£∫ame
(
u£∫ame
)

946 
îr
 !
nû
 {

947 
	`hâpEº‹
(
w
, 
r
, 
îr
, 
hâp
.
SètusI¡î«lSîvîEº‹
)

951 
	`wrôeJSON
(
w
, 
r
, 
admöSórchResu…
)

952 
log
.
	`Prötf
("%s: %†£¨ched f‹ u£∫amê%s", 
u£rDisc‹dId
, 
r
.
URL
.
P©h
, 
u£∫ame
)

953 
	}
}

	@api/savedata/clear.go

18 
∑ckage
 
ßved©a


20 
imp‹t
 (

28 
ty≥
 
CÀ¨Re•⁄£
 struct {

29 
Suc˚ss
 
	mboﬁ
 `
	mjs⁄
:"success"`

30 
Eº‹
 
°rög
 `
js⁄
:"error"`

34 
func
 
	$CÀ¨
(
uuid
 []
byã
, 
¶Ÿ
 , 
£ed
 
°rög
, 
ßve
 
defs
.
Sessi⁄SaveD©a
Ë(
CÀ¨Re•⁄£
, 
îr‹
) {

35 
v¨
 
ª•⁄£
 
CÀ¨Re•⁄£


36 
îr
 :
db
.
	`Upd©eAccou¡La°A˘ivôy
(
uuid
)

37 
îr
 !
nû
 {

38 
log
.
	`Pröt
("failedÅo updateáccountÜastáctivity")

41 
¶Ÿ
 < 0 || slŸ >
defs
.
Sessi⁄SlŸCou¡
 {

42  
ª•⁄£
, 
fmt
.
	`Eº‹f
("¶Ÿ id %d ouào‡ønge", 
¶Ÿ
)

45 
£ssi⁄Com∂ëed
 :
	`vÆid©eSessi⁄Com∂ëed
(
ßve
)

47 
ßve
.
GameMode
 =3 && save.
Sìd
 =
£ed
 {

48 
waveCom∂ëed
 :
ßve
.
WaveIndex


49 !
£ssi⁄Com∂ëed
 {

50 
waveCom∂ëed
--

53 
ßve
.
Sc‹e
 >= 20000 {

54 
db
.
	`SëAccou¡B™√d
(
uuid
, 
åue
)

57 
îr
 = 
db
.
	`AddOrUpd©eAccou¡DaûyRun
(
uuid
, 
ßve
.
Sc‹e
, 
waveCom∂ëed
)

58 
îr
 !
nû
 {

59 
log
.
	`Prötf
("ÁûedÅÿadd o∏upd©êdaûyÑu¿ªc‹d: %s", 
îr
)

63 
£ssi⁄Com∂ëed
 {

64 
ª•⁄£
.
Suc˚ss
, 
îr
 = 
db
.
	`TryAddSìdCom∂ëi⁄
(
uuid
, 
ßve
.
Sìd
, (ßve.
GameMode
))

65 
îr
 !
nû
 {

66 
log
.
	`Prötf
("ÁûedÅÿm¨k sìdá†com∂ëed: %s", 
îr
)

70 
îr
 = 
db
.
	`DñëeSessi⁄SaveD©a
(
uuid
, 
¶Ÿ
)

71 
îr
 !
nû
 {

72 
log
.
	`Prötf
("ÁûedÅÿdñëê£ssi⁄ savêd©a: %s", 
îr
)

75  
ª•⁄£
, 
nû


76 
	}
}

	@api/savedata/common.go

18 
∑ckage
 
ßved©a


20 
imp‹t
 (

24 
func
 
	$vÆid©eSessi⁄Com∂ëed
(
£ssi⁄
 
defs
.
Sessi⁄SaveD©a
Ë
boﬁ
 {

25 
£ssi⁄
.
GameMode
 {

27  
£ssi⁄
.
B©éeTy≥
 =2 && sessi⁄.
WaveIndex
 == 200

29  
£ssi⁄
.
B©éeTy≥
 =2 && sessi⁄.
WaveIndex
 == 50

32  
Ál£


33 
	}
}

	@api/savedata/delete.go

18 
∑ckage
 
ßved©a


20 
imp‹t
 (

29 
func
 
	$Dñëe
(
uuid
 []
byã
, 
d©©y≥
, 
¶Ÿ
 Ë
îr‹
 {

30 
îr
 :
db
.
	`Upd©eAccou¡La°A˘ivôy
(
uuid
)

31 
îr
 !
nû
 {

32 
log
.
	`Pröt
("failedÅo updateáccountÜastáctivity")

35 
d©©y≥
 {

37 
¶Ÿ
 < 0 || slŸ >
defs
.
Sessi⁄SlŸCou¡
 {

38 
îr
 = 
fmt
.
	`Eº‹f
("¶Ÿ id %d ouào‡ønge", 
¶Ÿ
)

42 
îr
 = 
db
.
	`DñëeSessi⁄SaveD©a
(
uuid
, 
¶Ÿ
)

44 
îr
 = 
fmt
.
	`Eº‹f
("invalid dataÅype")

46 
îr
 !
nû
 {

47  
îr


50  
nû


51 
	}
}

	@api/savedata/newclear.go

18 
∑ckage
 
ßved©a


20 
imp‹t
 (

28 
func
 
	$NewCÀ¨
(
uuid
 []
byã
, 
¶Ÿ
 Ë(
boﬁ
, 
îr‹
) {

29 
¶Ÿ
 < 0 || slŸ >
defs
.
Sessi⁄SlŸCou¡
 {

30  
Ál£
, 
fmt
.
	`Eº‹f
("¶Ÿ id %d ouào‡ønge", 
¶Ÿ
)

33 
£ssi⁄
, 
îr
 :
db
.
	`RódSessi⁄SaveD©a
(
uuid
, 
¶Ÿ
)

34 
îr
 !
nû
 {

35  
Ál£
, 
îr


38 
com∂ëed
, 
îr
 :
db
.
	`RódSìdCom∂ëed
(
uuid
, 
£ssi⁄
.
Sìd
)

39 
îr
 !
nû
 {

40  
Ál£
, 
fmt
.
	`Eº‹f
("ÁûedÅÿªad sìd com∂ëed: %s", 
îr
)

43  !
com∂ëed
, 
nû


44 
	}
}

	@api/savedata/session.go

18 
∑ckage
 
ßved©a


20 
imp‹t
 (

25 
func
 
	$GëSessi⁄
(
uuid
 []
byã
, 
¶Ÿ
 Ë(
defs
.
Sessi⁄SaveD©a
, 
îr‹
) {

26 
£ssi⁄
, 
îr
 :
db
.
	`RódSessi⁄SaveD©a
(
uuid
, 
¶Ÿ
)

27 
îr
 !
nû
 {

28  
£ssi⁄
, 
îr


31  
£ssi⁄
, 
nû


32 
	}
}

34 
func
 
	$Upd©eSessi⁄
(
uuid
 []
byã
, 
¶Ÿ
 , 
d©a
 
defs
.
Sessi⁄SaveD©a
Ë
îr‹
 {

35 
îr
 :
db
.
	`St‹eSessi⁄SaveD©a
(
uuid
, 
d©a
, 
¶Ÿ
)

36 
îr
 !
nû
 {

37  
îr


40  
nû


41 
	}
}

43 
func
 
	$DñëeSessi⁄
(
uuid
 []
byã
, 
¶Ÿ
 Ë
îr‹
 {

44 
îr
 :
db
.
	`DñëeSessi⁄SaveD©a
(
uuid
, 
¶Ÿ
)

45 
îr
 !
nû
 {

46  
îr


49  
nû


50 
	}
}

	@api/savedata/system.go

18 
∑ckage
 
ßved©a


20 
imp‹t
 (

29 
func
 
	$GëSy°em
(
uuid
 []
byã
Ë(
defs
.
Sy°emSaveD©a
, 
îr‹
) {

30 
v¨
 
sy°em
 
defs
.
Sy°emSaveD©a


31 
v¨
 
îr
 
îr‹


33 
os
.
	`Gëív
("S3_SYSTEM_BUCKET_NAME") != "" {

34 
sy°em
, 
îr
 = 
db
.
	`GëSy°emSaveFromS3
(
uuid
)

36 
log
.
	`Pröén
("use database GetSystem");

37 
sy°em
, 
îr
 = 
db
.
	`RódSy°emSaveD©a
(
uuid
)

39 
îr
 !
nû
 {

40  
sy°em
, 
îr


43  
sy°em
, 
nû


44 
	}
}

46 
func
 
	$Upd©eSy°em
(
uuid
 []
byã
, 
d©a
 
defs
.
Sy°emSaveD©a
Ë
îr‹
 {

47 
d©a
.
TøöîId
 =0 && d©a.
Se¸ëId
 == 0 {

48  
fmt
.
	`Eº‹f
("invalid system data")

51 
îr
 :
db
.
	`Upd©eAccou¡Sèts
(
uuid
, 
d©a
.
GameSèts
, d©a.
VouchîCou¡s
)

52 
îr
 !
nû
 {

53  
fmt
.
	`Eº‹f
("ÁûedÅÿupd©êaccou¡ sèts: %s", 
îr
)

56 
os
.
	`Gëív
("S3_SYSTEM_BUCKET_NAME") != "" {

57 
îr
 = 
db
.
	`St‹eSy°emSaveD©aS3
(
uuid
, 
d©a
)

59 
îr
 = 
db
.
	`St‹eSy°emSaveD©a
(
uuid
, 
d©a
)

61 
îr
 !
nû
 {

62  
îr


65  
nû


66 
	}
}

68 
func
 
	$DñëeSy°em
(
uuid
 []
byã
Ë
îr‹
 {

69 
îr
 :
db
.
	`DñëeSy°emSaveD©a
(
uuid
)

70 
îr
 !
nû
 {

71  
îr


74  
nû


75 
	}
}

	@api/savedata/update.go

18 
∑ckage
 
ßved©a


20 
imp‹t
 (

29 
func
 
	$Upd©e
(
uuid
 []
byã
, 
¶Ÿ
 , 
ßve
 
™y
Ë
îr‹
 {

30 
îr
 :
db
.
	`Upd©eAccou¡La°A˘ivôy
(
uuid
)

31 
îr
 !
nû
 {

32 
log
.
	`Pröt
("failedÅo updateáccountÜastáctivity")

35 
ßve
 :ßve.(
ty≥
) {

36 
defs
.
Sy°emSaveD©a
:

37 
ßve
.
TøöîId
 =0 && save.
Se¸ëId
 == 0 {

38  
fmt
.
	`Eº‹f
("invalid system data")

41 
îr
 = 
db
.
	`Upd©eAccou¡Sèts
(
uuid
, 
ßve
.
GameSèts
, save.
VouchîCou¡s
)

42 
îr
 !
nû
 {

43  
fmt
.
	`Eº‹f
("ÁûedÅÿupd©êaccou¡ sèts: %s", 
îr
)

46  
db
.
	`St‹eSy°emSaveD©a
(
uuid
, 
ßve
)

48 
defs
.
Sessi⁄SaveD©a
:

49 
¶Ÿ
 < 0 || slŸ >
defs
.
Sessi⁄SlŸCou¡
 {

50  
fmt
.
	`Eº‹f
("¶Ÿ id %d ouào‡ønge", 
¶Ÿ
)

52  
db
.
	`St‹eSessi⁄SaveD©a
(
uuid
, 
ßve
, 
¶Ÿ
)

55  
fmt
.
	`Eº‹f
("invalid dataÅype")

57 
	}
}

	@api/stats.go

18 
∑ckage
 
≠i


20 
imp‹t
 (

28 
v¨
 (

29 
scheduÀr
 = 
¸⁄
.
New
(¸⁄.
	$WôhLoˇti⁄
(
time
.
UTC
))

30 
∂ayîCou¡
 

31 
b©éeCou¡
 

32 
˛assicSessi⁄Cou¡
 

35 
func
 
	$scheduÀSètRe‰esh
(Ë
îr‹
 {

36 
_
, 
îr
 :
scheduÀr
.
	`AddFunc
("@evîy 30s", 
	`func
() {

37 
îr
 :
	`upd©eSèts
()

38 
îr
 !
nû
 {

39 
log
.
	`Prötf
("ÁûedÅÿupd©ê°©s: %s", 
îr
)

42 
îr
 !
nû
 {

43  
îr


46 
scheduÀr
.
	`Sèπ
()

47  
nû


48 
	}
}

50 
func
 
	$upd©eSèts
(Ë
îr‹
 {

51 
v¨
 
îr
 
îr‹


52 
∂ayîCou¡
, 
îr
 = 
db
.
	`FëchPœyîCou¡
()

53 
îr
 !
nû
 {

54  
îr


57 
b©éeCou¡
, 
îr
 = 
db
.
	`FëchB©éeCou¡
()

58 
îr
 !
nû
 {

59  
îr


62 
˛assicSessi⁄Cou¡
, 
îr
 = 
db
.
	`FëchCœssicSessi⁄Cou¡
()

63 
îr
 !
nû
 {

64  
îr


67  
nû


68 
	}
}

	@cache/rediscache.go

1 
∑ckage
 
ˇche


3 
imp‹t
 (

12 
v¨
 (

13 
Ctx
 = 
c⁄ãxt
.
	$Background
()

14 
Rdb
 *
ªdis
.
Clõ¡


17 
func
 
	$Inô
(Ë
îr‹
 {

18 
addr
 :
	`gëEnv
("REDIS_ADDR", "redis:6379")

19 
∑ss
 :
os
.
	`Gëív
("REDIS_PASS")

20 
dbNum
, 
_
 :
°rc⁄v
.
	`Atoi
(
	`gëEnv
("REDIS_DB", "0"))

22 
Rdb
 = 
ªdis
.
	`NewClõ¡
(&ªdis.
O±i⁄s
{

23 
Addr
: 
addr
,

24 
Passw‹d
: 
∑ss
,

25 
DB
: 
dbNum
,

26 
PoﬁSize
: 10,

27 
MöIdÀC⁄ns
: 5,

31 
˘x
, 
ˇn˚l
 :
c⁄ãxt
.
	`WôhTimeout
(
Ctx
, 
time
.
Sec⁄d
)

32 
de„r
 
	`ˇn˚l
()

33  
Rdb
.
	`Pög
(
˘x
).
	`Eº
()

34 
	}
}

36 
func
 
	$gëEnv
(
k
, 
def
 
°rög
) string {

37 
v
, 
ok
 :
os
.
	`LookupEnv
(
k
); ok {

38  
v


40  
def


41 
	}
}

	@db/account.go

18 
∑ckage
 
db


20 
imp‹t
 (

26 
_
 "github.com/go-sql-driver/mysql"

30 
func
 
	$AddAccou¡Rec‹d
(
uuid
 []
byã
, 
u£∫ame
 
°rög
, 
key
, 
ß…
 []byãË
îr‹
 {

31 
_
, 
îr
 :
h™dÀ
.
	`Exec
("INSERT INTOáccou¡†(uuid, u£∫ame, hash, sÆt,Ñegi°îedËVALUES (?, ?, ?, ?, UTC_TIMESTAMP())", 
uuid
, 
u£∫ame
, 
key
, 
ß…
)

32 
îr
 !
nû
 {

33  
îr


36  
nû


37 
	}
}

39 
func
 
	$AddAccou¡Sessi⁄
(
u£∫ame
 
°rög
, 
tokí
 []
byã
Ë
îr‹
 {

40 
_
, 
îr
 :
h™dÀ
.
	`Exec
("INSERT INTO sessi⁄†(uuid,Åokí,ÉxpúeËSELECTá.uuid, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 WEEKËFROMáccou¡†®WHEREá.u£∫amê?", 
tokí
, 
u£∫ame
)

41 
îr
 !
nû
 {

42  
îr


45 
_
, 
îr
 = 
h™dÀ
.
	`Exec
("UPDATEáccou¡†SETÜa°LoggedI¿UTC_TIMESTAMP(ËWHERE u£∫amê?", 
u£∫ame
)

46 
îr
 !
nû
 {

47  
îr


50  
nû


51 
	}
}

53 
func
 
	$AddDisc‹dIdByU£∫ame
(
disc‹dId
 
°rög
, 
u£∫ame
 såögË
îr‹
 {

54 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET disc‹dId = ? WHERE u£∫amê?", 
disc‹dId
, 
u£∫ame
)

55 
îr
 !
nû
 {

56  
îr


59  
nû


60 
	}
}

62 
func
 
	$AddGoogÀIdByU£∫ame
(
googÀId
 
°rög
, 
u£∫ame
 såögË
îr‹
 {

63 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET googÀId = ? WHERE u£∫amê?", 
googÀId
, 
u£∫ame
)

64 
îr
 !
nû
 {

65  
îr


68  
nû


69 
	}
}

71 
func
 
	$AddGoogÀIdByUUID
(
googÀId
 
°rög
, 
uuid
 []
byã
Ë
îr‹
 {

72 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET googÀId = ? WHERE uuid = ?", 
googÀId
, 
uuid
)

73 
îr
 !
nû
 {

74  
îr


77  
nû


78 
	}
}

80 
func
 
	$AddDisc‹dIdByUUID
(
disc‹dId
 
°rög
, 
uuid
 []
byã
Ë
îr‹
 {

81 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET disc‹dId = ? WHERE uuid = ?", 
disc‹dId
, 
uuid
)

82 
îr
 !
nû
 {

83  
îr


86  
nû


87 
	}
}

89 
func
 
	$FëchU£∫ameByDisc‹dId
(
disc‹dId
 
°rög
Ë(°rög, 
îr‹
) {

90 
v¨
 
u£∫ame
 
°rög


91 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT u£∫amêFROMáccou¡†WHERE disc‹dId = ?", 
disc‹dId
).
	`Sˇn
(&
u£∫ame
)

92 
îr
 !
nû
 {

93  "", 
îr


96  
u£∫ame
, 
nû


97 
	}
}

99 
func
 
	$FëchU£∫ameByGoogÀId
(
googÀId
 
°rög
Ë(°rög, 
îr‹
) {

100 
v¨
 
u£∫ame
 
°rög


101 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT u£∫amêFROMáccou¡†WHERE googÀId = ?", 
googÀId
).
	`Sˇn
(&
u£∫ame
)

102 
îr
 !
nû
 {

103  "", 
îr


106  
u£∫ame
, 
nû


107 
	}
}

109 
func
 
	$FëchDisc‹dIdByU£∫ame
(
u£∫ame
 
°rög
Ë(°rög, 
îr‹
) {

110 
v¨
 
disc‹dId
 
sql
.
NuŒSåög


111 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT disc‹dId FROMáccou¡†WHERE u£∫amê?", 
u£∫ame
).
	`Sˇn
(&
disc‹dId
)

112 
îr
 !
nû
 {

113  "", 
îr


116 !
disc‹dId
.
VÆid
 {

117  "", 
nû


120  
disc‹dId
.
Såög
, 
nû


121 
	}
}

123 
func
 
	$FëchGoogÀIdByU£∫ame
(
u£∫ame
 
°rög
Ë(°rög, 
îr‹
) {

124 
v¨
 
googÀId
 
sql
.
NuŒSåög


125 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT googÀId FROMáccou¡†WHERE u£∫amê?", 
u£∫ame
).
	`Sˇn
(&
googÀId
)

126 
îr
 !
nû
 {

127  "", 
îr


130 !
googÀId
.
VÆid
 {

131  "", 
nû


134  
googÀId
.
Såög
, 
nû


135 
	}
}

137 
func
 
	$FëchDisc‹dIdByUUID
(
uuid
 []
byã
Ë(
°rög
, 
îr‹
) {

138 
v¨
 
disc‹dId
 
sql
.
NuŒSåög


139 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT disc‹dId FROMáccou¡†WHERE uuid = ?", 
uuid
).
	`Sˇn
(&
disc‹dId
)

140 
îr
 !
nû
 {

141  "", 
îr


144 !
disc‹dId
.
VÆid
 {

145  "", 
nû


148  
disc‹dId
.
Såög
, 
nû


149 
	}
}

151 
func
 
	$FëchGoogÀIdByUUID
(
uuid
 []
byã
Ë(
°rög
, 
îr‹
) {

152 
v¨
 
googÀId
 
sql
.
NuŒSåög


153 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT googÀId FROMáccou¡†WHERE uuid = ?", 
uuid
).
	`Sˇn
(&
googÀId
)

154 
îr
 !
nû
 {

155  "", 
îr


158 !
googÀId
.
VÆid
 {

159  "", 
nû


162  
googÀId
.
Såög
, 
nû


163 
	}
}

165 
func
 
	$FëchU£∫ameBySessi⁄Tokí
(
tokí
 []
byã
Ë(
°rög
, 
îr‹
) {

166 
v¨
 
u£∫ame
 
°rög


167 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECTá.u£∫amêFROMáccou¡†®JOIN sessi⁄††ONá.uuid = s.uuid WHERE s.tokí = ?", 
tokí
).
	`Sˇn
(&
u£∫ame
)

168 
îr
 !
nû
 {

169  "", 
îr


172  
u£∫ame
, 
nû


173 
	}
}

175 
func
 
	$CheckU£∫ameExi°s
(
u£∫ame
 
°rög
Ë(°rög, 
îr‹
) {

176 
v¨
 
dbU£∫ame
 
sql
.
NuŒSåög


177 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT u£∫amêFROMáccou¡†WHERE u£∫amê?", 
u£∫ame
).
	`Sˇn
(&
dbU£∫ame
)

178 
îr
 !
nû
 {

179  "", 
îr


181 !
dbU£∫ame
.
VÆid
 {

182  "", 
nû


185  
dbU£∫ame
.
Såög
, 
nû


186 
	}
}

188 
func
 
	$FëchLa°LoggedInD©eByU£∫ame
(
u£∫ame
 
°rög
Ë(°rög, 
îr‹
) {

189 
v¨
 
œ°LoggedIn
 
sql
.
NuŒSåög


190 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECTÜa°LoggedI¿FROMáccou¡†WHERE u£∫amê?", 
u£∫ame
).
	`Sˇn
(&
œ°LoggedIn
)

191 
îr
 !
nû
 {

192  "", 
îr


194 !
œ°LoggedIn
.
VÆid
 {

195  "", 
nû


198  
œ°LoggedIn
.
Såög
, 
nû


199 
	}
}

201 
ty≥
 
AdmöSórchRe•⁄£
 struct {

202 
U£∫ame
 
	m°rög
 `
	mjs⁄
:"username"`

203 
Disc‹dId
 
°rög
 `
js⁄
:"discordId"`

204 
GoogÀId
 
°rög
 `
js⁄
:"googleId"`

205 
La°A˘ivôy
 
°rög
 `
js⁄
:"lastLoggedIn"`

206 
Regi°îed
 
°rög
 `
js⁄
:"registered"`

209 
func
 
	$FëchAdmöDëaûsByU£∫ame
(
dbU£∫ame
 
°rög
Ë(
AdmöSórchRe•⁄£
, 
îr‹
) {

210 
v¨
 
u£∫ame
, 
disc‹dId
, 
googÀId
, 
œ°A˘ivôy
, 
ªgi°îed
 
sql
.
NuŒSåög


211 
v¨
 
admöRe•⁄£
 
AdmöSórchRe•⁄£


213 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT u£∫ame, disc‹dId, googÀId,Üa°A˘ivôy,Ñegi°îed fromáccou¡†WHERE u£∫amê?", 
dbU£∫ame
).
	`Sˇn
(&
u£∫ame
, &
disc‹dId
, &
googÀId
, &
œ°A˘ivôy
, &
ªgi°îed
)

214 
îr
 !
nû
 {

215  
admöRe•⁄£
, 
îr


218 
admöRe•⁄£
 = 
AdmöSórchRe•⁄£
{

219 
U£∫ame
: 
u£∫ame
.
Såög
,

220 
Disc‹dId
: 
disc‹dId
.
Såög
,

221 
GoogÀId
: 
googÀId
.
Såög
,

222 
La°A˘ivôy
: 
œ°A˘ivôy
.
Såög
,

223 
Regi°îed
: 
ªgi°îed
.
Såög
,

226  
admöRe•⁄£
, 
nû


227 
	}
}

229 
func
 
	$Upd©eAccou¡Passw‹d
(
uuid
, 
key
, 
ß…
 []
byã
Ë
îr‹
 {

230 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET (hash, sÆtËVALUES (?, ?ËWHERE uuid = ?", 
key
, 
ß…
, 
uuid
)

231 
îr
 !
nû
 {

232  
îr


235  
nû


236 
	}
}

238 
func
 
	$Upd©eAccou¡La°A˘ivôy
(
uuid
 []
byã
Ë
îr‹
 {

239 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SETÜa°A˘ivôy = UTC_TIMESTAMP(ËWHERE uuid = ?", 
uuid
)

240 
îr
 !
nû
 {

241  
îr


244  
nû


245 
	}
}

247 
func
 
	$Upd©eAccou¡Sèts
(
uuid
 []
byã
, 
°©s
 
defs
.
GameSèts
, 
vouchîCou¡s
 
m≠
[
°rög
]Ë
îr‹
 {

248 
v¨
 
cﬁumns
 = []
°rög
{"playTime", "battles", "classicSessionsPlayed", "sessionsWon", "highestEndlessWave", "highestLevel", "pokemonSeen", "pokemonDefeated", "pokemonCaught", "pokemonHatched", "eggsPulled", "regularVouchers", "plusVouchers", "premiumVouchers", "goldenVouchers"}

250 
v¨
 
°©Cﬁs
 []
°rög


251 
v¨
 
°©VÆues
 []
öãrÁ˚
{}

253 
m
, 
ok
 :
°©s
.(
m≠
[
°rög
]
öãrÁ˚
{})

254 !
ok
 {

255  
fmt
.
	`Eº‹f
("ex≥˘ed m≠[°rög]öãrÁ˚{}, gŸ %T", 
°©s
)

258 
k
, 
v
 :
ønge
 
m
 {

259 
vÆue
, 
ok
 :
v
.(
Êﬂt64
)

260 !
ok
 {

261  
fmt
.
	`Eº‹f
("ex≥˘ed flﬂt64, gŸ %T", 
v
)

264 
¶i˚s
.
	`C⁄èös
(
cﬁumns
, 
k
) {

265 
°©Cﬁs
 = 
	`≠≥nd
(°©Cﬁs, 
k
)

266 
°©VÆues
 = 
	`≠≥nd
(°©VÆues, 
vÆue
)

270 
k
, 
v
 :
ønge
 
vouchîCou¡s
 {

271 
v¨
 
cﬁumn
 
°rög


272 
k
 {

274 
cﬁumn
 = "regularVouchers"

276 
cﬁumn
 = "plusVouchers"

278 
cﬁumn
 = "premiumVouchers"

280 
cﬁumn
 = "goldenVouchers"

284 
°©Cﬁs
 = 
	`≠≥nd
(°©Cﬁs, 
cﬁumn
)

285 
°©VÆues
 = 
	`≠≥nd
(°©VÆues, 
v
)

288 
v¨
 
°©Args
 []
öãrÁ˚
{}

289 
°©Args
 = 
	`≠≥nd
(°©Args, 
uuid
)

290 
ønge
 2 {

291 
°©Args
 = 
	`≠≥nd
(°©Args, 
°©VÆues
...)

294 
quîy
 := "INSERT INTOáccountStats (uuid"

296 
_
, 
cﬁ
 :
ønge
 
°©Cﬁs
 {

297 
quîy
 +", " + 
cﬁ


300 
quîy
 += ") VALUES (?"

302 
ønge
 
	`Àn
(
°©Cﬁs
) {

303 
quîy
 += ", ?"

306 
quîy
 += ") ON DUPLICATE KEY UPDATE "

308 
i
, 
cﬁ
 :
ønge
 
°©Cﬁs
 {

309 
i
 > 0 {

310 
quîy
 += ", "

313 
quîy
 +
cﬁ
 + " = ?"

316 
_
, 
îr
 :
h™dÀ
.
	`Exec
(
quîy
, 
°©Args
...)

317 
îr
 !
nû
 {

318  
îr


321  
nû


322 
	}
}

324 
func
 
	$SëAccou¡B™√d
(
uuid
 []
byã
, 
b™√d
 
boﬁ
Ë
îr‹
 {

325 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET b™√d = ? WHERE uuid = ?", 
b™√d
, 
uuid
)

326 
îr
 !
nû
 {

327  
îr


330  
nû


331 
	}
}

333 
func
 
FëchAccou¡KeySÆtFromU£∫ame
(
u£∫ame
 
°rög
Ë([]
	gbyã
, []byã, 
	gîr‹
) {

334 
v¨
 
	gkey
, 
	gß…
 []
byã


335 
	gîr
 :
h™dÀ
.
QuîyRow
("SELECT hash, sÆàFROMáccou¡†WHERE u£∫amê?", 
u£∫ame
).
Sˇn
(&
key
, &
ß…
)

336 
	gîr
 !
nû
 {

337  
nû
,Çû, 
îr


340  
key
, 
	gß…
, 
	gnû


343 
func
 
	$FëchTøöîIds
(
uuid
 []
byã
Ë(
åaöîId
, 
£¸ëId
 , 
îr
 
îr‹
) {

344 
îr
 = 
h™dÀ
.
	`QuîyRow
("SELECTÅøöîId, se¸ëId FROMáccou¡†WHERE uuid = ?", 
uuid
).
	`Sˇn
(&
åaöîId
, &
£¸ëId
)

345 
îr
 !
nû
 {

346  0, 0, 
îr


349  
åaöîId
, 
£¸ëId
, 
nû


350 
	}
}

352 
func
 
	$Upd©eTøöîIds
(
åaöîId
, 
£¸ëId
 , 
uuid
 []
byã
Ë
îr‹
 {

353 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SETÅøöîId = ?, se¸ëId = ? WHERE uuid = ?", 
åaöîId
, 
£¸ëId
, 
uuid
)

354 
îr
 !
nû
 {

355  
îr


358  
nû


359 
	}
}

361 
func
 
	$IsA˘iveSessi⁄
(
uuid
 []
byã
, 
£ssi⁄Id
 
°rög
Ë(
boﬁ
, 
îr‹
) {

362 
v¨
 
id
 
°rög


363 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT clõ¡Sessi⁄Id FROMá˘iveClõ¡Sessi⁄†WHERE uuid = ?", 
uuid
).
	`Sˇn
(&
id
)

364 
îr
 !
nû
 {

365 
îr‹s
.
	`Is
(
îr
, 
sql
.
EºNoRows
) {

366 
îr
 = 
	`Upd©eA˘iveSessi⁄
(
uuid
, 
£ssi⁄Id
)

367 
îr
 !
nû
 {

368  
Ál£
, 
îr


371  
åue
, 
nû


374  
Ál£
, 
îr


377  
id
 ="" || id =
£ssi⁄Id
, 
nû


378 
	}
}

380 
func
 
	$Upd©eA˘iveSessi⁄
(
uuid
 []
byã
, 
˛õ¡Sessi⁄Id
 
°rög
Ë
îr‹
 {

381 
_
, 
îr
 :
h™dÀ
.
	`Exec
("INSERT INTOá˘iveClõ¡Sessi⁄†(uuid, clõ¡Sessi⁄IdËVALUES (?, ?ËON DUPLICATE KEY UPDATE clõ¡Sessi⁄Id = ?", 
uuid
, 
˛õ¡Sessi⁄Id
, clientSessionId)

382 
îr
 !
nû
 {

383  
îr


386  
nû


387 
	}
}

389 
func
 
FëchUUIDFromTokí
(
tokí
 []
byã
Ë([]
	gbyã
, 
	gîr‹
) {

390 
v¨
 
	guuid
 []
byã


391 
	gîr
 :
h™dÀ
.
QuîyRow
("SELECT uuid FROM sessi⁄†WHEREÅokí = ?", 
tokí
).
Sˇn
(&
uuid
)

392 
	gîr
 !
nû
 {

393  
nû
, 
îr


396  
uuid
, 
	gnû


399 
func
 
	$RemoveSessi⁄FromTokí
(
tokí
 []
byã
Ë
îr‹
 {

400 
_
, 
îr
 :
h™dÀ
.
	`Exec
("DELETE FROM sessi⁄†WHEREÅokí = ?", 
tokí
)

401 
îr
 !
nû
 {

402  
îr


405  
nû


406 
	}
}

408 
func
 
	$FëchU£∫ameFromUUID
(
uuid
 []
byã
Ë(
°rög
, 
îr‹
) {

409 
v¨
 
u£∫ame
 
°rög


410 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT u£∫amêFROMáccou¡†WHERE uuid = ?", 
uuid
).
	`Sˇn
(&
u£∫ame
)

411 
îr
 !
nû
 {

412  "", 
îr


415  
u£∫ame
, 
nû


416 
	}
}

418 
func
 
FëchUUIDFromU£∫ame
(
u£∫ame
 
°rög
Ë([]
	gbyã
, 
	gîr‹
) {

419 
v¨
 
	guuid
 []
byã


420 
	gîr
 :
h™dÀ
.
QuîyRow
("SELECT uuid FROMáccou¡†WHERE u£∫amê?", 
u£∫ame
).
Sˇn
(&
uuid
)

421 
	gîr
 !
nû
 {

422  
nû
, 
îr


425  
uuid
, 
	gnû


428 
func
 
	$RemoveDisc‹dIdByUUID
(
uuid
 []
byã
Ë
îr‹
 {

429 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET disc‹dId = NULL WHERE uuid = ?", 
uuid
)

430 
îr
 !
nû
 {

431  
îr


434  
nû


435 
	}
}

437 
func
 
	$RemoveGoogÀIdByUUID
(
uuid
 []
byã
Ë
îr‹
 {

438 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET googÀId = NULL WHERE uuid = ?", 
uuid
)

439 
îr
 !
nû
 {

440  
îr


443  
nû


444 
	}
}

446 
func
 
	$RemoveGoogÀIdByU£∫ame
(
u£∫ame
 
°rög
Ë
îr‹
 {

447 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET googÀId = NULL WHERE u£∫amê?", 
u£∫ame
)

448 
îr
 !
nû
 {

449  
îr


452  
nû


453 
	}
}

455 
func
 
	$RemoveDisc‹dIdByU£∫ame
(
u£∫ame
 
°rög
Ë
îr‹
 {

456 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET disc‹dId = NULL WHERE u£∫amê?", 
u£∫ame
)

457 
îr
 !
nû
 {

458  
îr


461  
nû


462 
	}
}

464 
func
 
	$RemoveDisc‹dIdByDisc‹dId
(
disc‹dId
 
°rög
Ë
îr‹
 {

465 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET disc‹dId = NULL WHERE disc‹dId = ?", 
disc‹dId
)

466 
îr
 !
nû
 {

467  
îr


470  
nû


471 
	}
}

473 
func
 
	$RemoveGoogÀIdByDisc‹dId
(
disc‹dId
 
°rög
Ë
îr‹
 {

474 
_
, 
îr
 :
h™dÀ
.
	`Exec
("UPDATEáccou¡†SET googÀId = NULL WHERE disc‹dId = ?", 
disc‹dId
)

475 
îr
 !
nû
 {

476  
îr


479  
nû


480 
	}
}

	@db/daily.go

18 
∑ckage
 
db


20 
imp‹t
 (

26 
func
 
	$TryAddDaûyRun
(
£ed
 
°rög
Ë(°rög, 
îr‹
) {

27 
v¨
 
a˘uÆSìd
 
°rög


28 
îr
 :
h™dÀ
.
	`QuîyRow
("INSERT INTO daûyRun†(£ed, d©eËVALUES (?, UTC_DATE()ËON DUPLICATE KEY UPDATE d©êd©êRETURNING sìd", 
£ed
).
	`Sˇn
(&
a˘uÆSìd
)

29 
îr
 !
nû
 {

30  "", 
îr


33  
a˘uÆSìd
, 
nû


34 
	}
}

36 
func
 
	$GëDaûyRunSìd
(Ë(
°rög
, 
îr‹
) {

37 
v¨
 
£ed
 
°rög


38 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT sìd FROM daûyRun†WHERE d©êUTC_DATE()").
	`Sˇn
(&
£ed
)

39 
îr
 !
nû
 {

40  "", 
îr


43  
£ed
, 
nû


44 
	}
}

46 
func
 
	$AddOrUpd©eAccou¡DaûyRun
(
uuid
 []
byã
, 
sc‹e
 , 
wave
 Ë
îr‹
 {

47 
_
, 
îr
 :
h™dÀ
.
	`Exec
("INSERT INTOáccou¡DaûyRun†(uuid, d©e, sc‹e, wave,Åime°ampËVALUES (?, UTC_DATE(), ?, ?, UTC_TIMESTAMP()ËON DUPLICATE KEY UPDATE sc‹êGREATEST(sc‹e, ?), wavêGREATEST(wave, ?),Åime°am∞IF(sc‹ê< ?, UTC_TIMESTAMP(),Åime°amp)", 
uuid
, 
sc‹e
, 
wave
, score, wave, score)

48 
îr
 !
nû
 {

49  
îr


52  
nû


53 
	}
}

55 
func
 
FëchR™kögs
(
ˇãg‹y
 , 
∑ge
 Ë([]
	gdefs
.
	gDaûyR™kög
, 
	gîr‹
) {

56 
v¨
 
	gønkögs
 []
	gdefs
.
DaûyR™kög


58 
	goff£t
 :(
∑ge
 - 1) * 10

60 
v¨
 
quîy
 
°rög


61 
ˇãg‹y
 {

63 
quîy
 = "SELECT RANK() OVER (ORDER BYádr.score DESC,ádr.timestamp),á.username,ádr.score,ádr.wave FROMáccountDailyRunsádr JOIN dailyRuns dr ON dr.date =ádr.date JOINáccountsá ONádr.uuid =á.uuid WHERE dr.date = UTC_DATE() ANDá.banned = 0 LIMIT 10 OFFSET ?"

65 
quîy
 = "SELECT RANK() OVER (ORDER BY SUM(adr.score) DESC,ádr.timestamp),á.username, SUM(adr.score), 0 FROMáccountDailyRunsádr JOIN dailyRuns dr ON dr.date =ádr.date JOINáccountsá ONádr.uuid =á.uuid WHERE dr.date >= DATE_SUB(DATE(UTC_TIMESTAMP()), INTERVAL DAYOFWEEK(UTC_TIMESTAMP()) - 1 DAY) ANDá.banned = 0 GROUP BYá.username ORDER BY 1 LIMIT 10 OFFSET ?"

68 
ªsu…s
, 
	gîr
 :
h™dÀ
.
Quîy
(
quîy
, 
off£t
)

69 
	gîr
 !
nû
 {

70  
ønkögs
, 
îr


73 
de„r
 
ªsu…s
.
Clo£
()

75 
ªsu…s
.
Next
() {

76 
v¨
 
ønkög
 
defs
.
DaûyR™kög


77 
îr
 = 
ªsu…s
.
Sˇn
(&
ønkög
.
R™k
, &ønkög.
U£∫ame
, &ønkög.
Sc‹e
, &ønkög.
Wave
)

78 
	gîr
 !
nû
 {

79  
ønkögs
, 
îr


82 
ønkögs
 = 
≠≥nd
‘™kögs, 
ønkög
)

85  
	gønkögs
, 
	gnû


88 
func
 
	$FëchR™kögPageCou¡
(
ˇãg‹y
 Ë(, 
îr‹
) {

89 
v¨
 
quîy
 
°rög


90 
ˇãg‹y
 {

92 
quîy
 = "SELECT COUNT(a.username) FROMáccountDailyRunsádr JOIN dailyRuns dr ON dr.date =ádr.date JOINáccountsá ONádr.uuid =á.uuid WHERE dr.date = UTC_DATE()"

94 
quîy
 = "SELECT COUNT(DISTINCTá.username) FROMáccountDailyRunsádr JOIN dailyRuns dr ON dr.date =ádr.date JOINáccountsá ONádr.uuid =á.uuid WHERE dr.date >= DATE_SUB(DATE(UTC_TIMESTAMP()), INTERVAL DAYOFWEEK(UTC_TIMESTAMP()) - 1 DAY)"

97 
v¨
 
ªc‹dCou¡
 

98 
îr
 :
h™dÀ
.
	`QuîyRow
(
quîy
).
	`Sˇn
(&
ªc‹dCou¡
)

99 
îr
 !
nû
 {

100  0, 
îr


103  (
m©h
.
	`Ceû
(
	`Êﬂt64
(
ªc‹dCou¡
Ë/ 10)), 
nû


104 
	}
}

	@db/db.go

18 
∑ckage
 
db


20 
imp‹t
 (

25 
_
 "github.com/go-sql-driver/mysql"

28 
v¨
 
h™dÀ
 *
	gsql
.
DB


30 
func
 
	$Inô
(
u£∫ame
, 
∑ssw‹d
, 
¥Ÿocﬁ
, 
addªss
, 
d©aba£
 
°rög
Ë
îr‹
 {

31 
v¨
 
îr
 
îr‹


33 
h™dÀ
, 
îr
 = 
sql
.
	`O≥n
("mysql", 
u£∫ame
+":"+
∑ssw‹d
+"@"+
¥Ÿocﬁ
+"("+
addªss
+")/"+
d©aba£
)

34 
îr
 !
nû
 {

35  
fmt
.
	`Eº‹f
("ÁûedÅÿ›í d©aba£ c⁄√˘i⁄: %s", 
îr
)

38 
c⁄ns
 := 64

40 
h™dÀ
.
	`SëMaxO≥nC⁄ns
(
c⁄ns
)

41 
h™dÀ
.
	`SëMaxIdÀC⁄ns
(
c⁄ns
)

43 
tx
, 
îr
 :
h™dÀ
.
	`Begö
()

44 
îr
 !
nû
 {

45 
log
.
	`F©Æ
(
îr
)

48 
îr
 = 
	`£tupDb
(
tx
)

49 
îr
 !
nû
 {

50 
tx
.
	`Rﬁlback
()

51 
log
.
	`F©Æ
(
îr
)

54 
îr
 = 
tx
.
	`Commô
()

55 
îr
 !
nû
 {

56 
log
.
	`F©Æ
(
îr
)

59  
nû


60 
	}
}

62 
func
 
	$£tupDb
(
tx
 *
sql
.
Tx
Ë
îr‹
 {

63 
quîõs
 :[]
°rög
{

66 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`accou¡s
 (
uuid
 
	`BINARY
(16ËNOT 
NULL
 
PRIMARY
 
KEY
, 
u£∫ame
 
	`VARCHAR
(16Ë
UNIQUE
 NOT NULL, 
hash
 BINARY(32ËNOT NULL, 
ß…
 BINARY(16ËNOT NULL, 
ªgi°îed
 
TIMESTAMP
 NOT NULL, 
œ°LoggedIn
 TIMESTAMP 
DEFAULT
 NULL, 
œ°A˘ivôy
 TIMESTAMP DEFAULT NULL, 
b™√d
 
	`TINYINT
(1ËNOT NULL DEFAULT 0, 
åaöîId
 
	`SMALLINT
(5Ë
UNSIGNED
 DEFAULT 0, 
£¸ëId
 SMALLINT(5) UNSIGNED DEFAULT 0)`,

67 `
CREATE
 
INDEX
 
IF
 
NOT
 
EXISTS
 
accou¡sByA˘ivôy
 
ON
 
	`accou¡s
 (
œ°A˘ivôy
)`,

69 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`£ssi⁄s
 (
tokí
 
	`BINARY
(32ËNOT 
NULL
 
PRIMARY
 
KEY
, 
uuid
 BINARY(16ËNOT NULL, 
a˘ive
 
	`TINYINT
(1ËNOT NULL 
DEFAULT
 0, 
expúe
 
TIMESTAMP
 DEFAULT NULL, 
CONSTRAINT
 
£ssi⁄s_ibfk_1
 
FOREIGN
 
	`KEY
 (uuidË
REFERENCES
 
	`accou¡s
 (uuidË
ON
 
DELETE
 
CASCADE
 ON 
UPDATE
 CASCADE)`,

70 `
CREATE
 
INDEX
 
IF
 
NOT
 
EXISTS
 
£ssi⁄sByUuid
 
ON
 
	`£ssi⁄s
 (
uuid
)`,

72 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`accou¡Sèts
 (
uuid
 
	`BINARY
(16ËNOT 
NULL
 
PRIMARY
 
KEY
, 
∂ayTime
 
	`INT
(11ËNOT NULL 
DEFAULT
 0, 
b©ées
 INT(11ËNOT NULL DEFAULT 0, 
˛assicSessi⁄sPœyed
 INT(11ËNOT NULL DEFAULT 0, 
£ssi⁄sW⁄
 INT(11ËNOT NULL DEFAULT 0, 
highe°EndÀssWave
 INT(11ËNOT NULL DEFAULT 0, 
highe°Levñ
 INT(11ËNOT NULL DEFAULT 0, 
pokem⁄Sìn
 INT(11ËNOT NULL DEFAULT 0, 
pokem⁄De„©ed
 INT(11ËNOT NULL DEFAULT 0, 
pokem⁄Caught
 INT(11ËNOT NULL DEFAULT 0, 
pokem⁄H©ched
 INT(11ËNOT NULL DEFAULT 0, 
eggsPuŒed
 INT(11ËNOT NULL DEFAULT 0, 
ªguœrVouchîs
 INT(11ËNOT NULL DEFAULT 0, 
∂usVouchîs
 INT(11ËNOT NULL DEFAULT 0, 
¥emiumVouchîs
 INT(11ËNOT NULL DEFAULT 0, 
gﬁdíVouchîs
 INT(11ËNOT NULL DEFAULT 0, 
CONSTRAINT
 
accou¡Sèts_ibfk_1
 
FOREIGN
 
	`KEY
 (uuidË
REFERENCES
 
	`accou¡s
 (uuidË
ON
 
DELETE
 
CASCADE
 ON 
UPDATE
 CASCADE)`,

74 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`accou¡Com≥nßti⁄s
 (
id
 
	`INT
(11ËNOT 
NULL
 
AUTO_INCREMENT
 
PRIMARY
 
KEY
, 
uuid
 
	`BINARY
(16ËNOT NULL, 
vouchîTy≥
 INT(11ËNOT NULL, 
cou¡
 INT(11ËNOT NULL 
DEFAULT
 1, 
˛aimed
 
	`BIT
(1ËNOT NULL DEFAULT 
b
'0', 
CONSTRAINT
 
accou¡Com≥nßti⁄s_ibfk_1
 
FOREIGN
 
	`KEY
 (uuidË
REFERENCES
 
	`accou¡s
 (uuidË
ON
 
DELETE
 
CASCADE
 ON 
UPDATE
 CASCADE)`,

75 `
CREATE
 
INDEX
 
IF
 
NOT
 
EXISTS
 
accou¡Com≥nßti⁄sByUuid
 
ON
 
	`accou¡Com≥nßti⁄s
 (
uuid
)`,

77 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`daûyRuns
 (
d©e
 
DATE
 NOT 
NULL
 
PRIMARY
 
KEY
, 
£ed
 
	`CHAR
(24Ë
CHARACTER
 
SET
 
ascii
 
COLLATE
 
ascii_bö
 NOT NULL)`,

78 `
CREATE
 
INDEX
 
IF
 
NOT
 
EXISTS
 
daûyRunsByD©eAndSìd
 
ON
 
	`daûyRuns
 (
d©e
, 
£ed
)`,

80 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`daûyRunCom∂ëi⁄s
 (
uuid
 
	`BINARY
(16ËNOT 
NULL
, 
£ed
 
	`CHAR
(24Ë
CHARACTER
 
SET
 
ascii
 
COLLATE
 
ascii_bö
 NOT NULL, 
mode
 
	`INT
(11ËNOT NULL 
DEFAULT
 0, 
sc‹e
 INT(11ËNOT NULL DEFAULT 0, 
time°amp
 
TIMESTAMP
 NOT NULL DEFAULT 
CURRENT_TIMESTAMP
, 
PRIMARY
 
	`KEY
 (uuid, sìd), 
CONSTRAINT
 
daûyRunCom∂ëi⁄s_ibfk_1
 
FOREIGN
 KEY (uuidË
REFERENCES
 
	`accou¡s
 (uuidË
ON
 
DELETE
 
CASCADE
 ON 
UPDATE
 CASCADE)`,

81 `
CREATE
 
INDEX
 
IF
 
NOT
 
EXISTS
 
daûyRunCom∂ëi⁄sByUuidAndSìd
 
ON
 
	`daûyRunCom∂ëi⁄s
 (
uuid
, 
£ed
)`,

83 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`accou¡DaûyRuns
 (
uuid
 
	`BINARY
(16ËNOT 
NULL
, 
d©e
 
DATE
 NOT NULL, 
sc‹e
 
	`INT
(11ËNOT NULL 
DEFAULT
 0, 
wave
 INT(11ËNOT NULL DEFAULT 0, 
time°amp
 
TIMESTAMP
 NOT NULL DEFAULT 
CURRENT_TIMESTAMP
, 
PRIMARY
 
	`KEY
 (uuid, d©e), 
CONSTRAINT
 
accou¡DaûyRuns_ibfk_1
 
FOREIGN
 KEY (uuidË
REFERENCES
 
	`accou¡s
 (uuidË
ON
 
DELETE
 
CASCADE
 ON 
UPDATE
 CASCADE, CONSTRAINT 
accou¡DaûyRuns_ibfk_2
 FOREIGN KEY (d©eËREFERENCES 
	`daûyRuns
 (d©eËON DELETE 
NO
 
ACTION
 ON UPDATE NO ACTION)`,

84 `
CREATE
 
INDEX
 
IF
 
NOT
 
EXISTS
 
accou¡DaûyRunsByD©e
 
ON
 
	`accou¡DaûyRuns
 (
d©e
)`,

86 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`sy°emSaveD©a
 (
uuid
 
	`BINARY
(16Ë
PRIMARY
 
KEY
, 
d©a
 
LONGBLOB
, 
time°amp
 
TIMESTAMP
, 
FOREIGN
 
	`KEY
 (uuidË
REFERENCES
 
	`accou¡s
 (uuidË
ON
 
DELETE
 
CASCADE
 ON 
UPDATE
 CASCADE)`,

88 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`£ssi⁄SaveD©a
 (
uuid
 
	`BINARY
(16), 
¶Ÿ
 
TINYINT
, 
d©a
 
LONGBLOB
, 
time°amp
 
TIMESTAMP
, 
PRIMARY
 
	`KEY
 (uuid, slŸ), 
FOREIGN
 KEY (uuidË
REFERENCES
 
	`accou¡s
 (uuidË
ON
 
DELETE
 
CASCADE
 ON 
UPDATE
 CASCADE)`,

93 `
ALTER
 
TABLE
 
£ssi⁄s
 
DROP
 
COLUMN
 
IF
 
EXISTS
 
a˘ive
`,

94 `
CREATE
 
TABLE
 
IF
 
NOT
 
EXISTS
 
	`a˘iveClõ¡Sessi⁄s
 (
uuid
 
	`BINARY
(16ËNOT 
NULL
 
PRIMARY
 
KEY
, 
˛õ¡Sessi⁄Id
 
	`VARCHAR
(32ËNOT NULL, 
FOREIGN
 
	`KEY
 (uuidË
REFERENCES
 
	`accou¡s
 (uuidË
ON
 
DELETE
 
CASCADE
 ON 
UPDATE
 CASCADE)`,

99 `
DROP
 
TABLE
 
accou¡Com≥nßti⁄s
`,

104 `
ALTER
 
TABLE
 
accou¡s
 
ADD
 
COLUMN
 
IF
 
NOT
 
EXISTS
 
disc‹dId
 
	`VARCHAR
(32Ë
UNIQUE
 
DEFAULT
 
NULL
`,

105 `
ALTER
 
TABLE
 
accou¡s
 
ADD
 
COLUMN
 
IF
 
NOT
 
EXISTS
 
googÀId
 
	`VARCHAR
(32Ë
UNIQUE
 
DEFAULT
 
NULL
`,

110 `
ALTER
 
TABLE
 
accou¡s
 
ADD
 
COLUMN
 
IF
 
NOT
 
EXISTS
 
isInLoˇlDb
 
	`TINYINT
(1ËNOT 
NULL
 
DEFAULT
 1`,

115 `
ALTER
 
TABLE
 
accou¡s
 
DROP
 
COLUMN
 
IF
 
EXISTS
 
isInLoˇlDb
`,

118 
_
, 
q
 :
ønge
 
quîõs
 {

119 
_
, 
îr
 :
tx
.
	`Exec
(
q
)

120 
îr
 !
nû
 {

121  
fmt
.
	`Eº‹f
("ÁûedÅÿexecuã quîy: %w, quîy: %s", 
îr
, 
q
)

125  
nû


126 
	}
}

	@db/game.go

18 
∑ckage
 
db


20 
func
 
	$FëchPœyîCou¡
(Ë(, 
îr‹
) {

21 
v¨
 
∂ayîCou¡
 

22 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT COUNT(*ËFROMáccou¡†WHEREÜa°A˘ivôy > DATE_SUB(UTC_TIMESTAMP(), INTERVAL 5 MINUTE)").
	`Sˇn
(&
∂ayîCou¡
)

23 
îr
 !
nû
 {

24  0, 
îr


27  
∂ayîCou¡
, 
nû


28 
	}
}

30 
func
 
	$FëchB©éeCou¡
(Ë(, 
îr‹
) {

31 
v¨
 
b©éeCou¡
 

32 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT COALESCE(SUM(s.b©ées), 0ËFROMáccou¡Sèt††JOINáccou¡†®ONá.uuid = s.uuid WHEREá.b™√d = 0").
	`Sˇn
(&
b©éeCou¡
)

33 
îr
 !
nû
 {

34  0, 
îr


37  
b©éeCou¡
, 
nû


38 
	}
}

40 
func
 
	$FëchCœssicSessi⁄Cou¡
(Ë(, 
îr‹
) {

41 
v¨
 
˛assicSessi⁄Cou¡
 

42 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT COALESCE(SUM(s.˛assicSessi⁄sPœyed), 0ËFROMáccou¡Sèt††JOINáccou¡†®ONá.uuid = s.uuid WHEREá.b™√d = 0").
	`Sˇn
(&
˛assicSessi⁄Cou¡
)

43 
îr
 !
nû
 {

44  0, 
îr


47  
˛assicSessi⁄Cou¡
, 
nû


48 
	}
}

	@db/savedata.go

18 
∑ckage
 
db


20 
imp‹t
 (

37 
func
 
	$TryAddSìdCom∂ëi⁄
(
uuid
 []
byã
, 
£ed
 
°rög
, 
mode
 Ë(
boﬁ
, 
îr‹
) {

38 
v¨
 
cou¡
 

39 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT COUNT(*ËFROM daûyRunCom∂ëi⁄†WHERE uuid = ? AND sìd = ?", 
uuid
, 
£ed
).
	`Sˇn
(&
cou¡
)

40 
îr
 !
nû
 {

41  
Ál£
, 
îr


42 } 
cou¡
 > 0 {

43  
Ál£
, 
nû


46 
_
, 
îr
 = 
h™dÀ
.
	`Exec
("INSERT INTO daûyRunCom∂ëi⁄†(uuid, sìd, mode,Åime°ampËVALUES (?, ?, ?, UTC_TIMESTAMP())", 
uuid
, 
£ed
, 
mode
)

47 
îr
 !
nû
 {

48  
Ál£
, 
îr


51  
åue
, 
nû


52 
	}
}

54 
func
 
	$RódSìdCom∂ëed
(
uuid
 []
byã
, 
£ed
 
°rög
Ë(
boﬁ
, 
îr‹
) {

55 
v¨
 
cou¡
 

56 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT COUNT(*ËFROM daûyRunCom∂ëi⁄†WHERE uuid = ? AND sìd = ?", 
uuid
, 
£ed
).
	`Sˇn
(&
cou¡
)

57 
îr
 !
nû
 {

58  
Ál£
, 
îr


61  
cou¡
 > 0, 
nû


62 
	}
}

64 
func
 
	$RódSy°emSaveD©a
(
uuid
 []
byã
Ë(
defs
.
Sy°emSaveD©a
, 
îr‹
) {

65 
log
.
	`Pröén
("RódSy°emSaveD©®", 
uuid
);

66 
v¨
 
sy°em
 
defs
.
Sy°emSaveD©a


68 
v¨
 
d©a
 []
byã


69 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT d©®FROM sy°emSaveD©®WHERE uuid = ?", 
uuid
).
	`Sˇn
(&
d©a
)

70 
îr
 !
nû
 {

71 
log
.
	`Pröén
("Not Find Data");

72  
sy°em
, 
îr


76 
log
.
	`Pröén
(
d©a
);

77 
zr
, 
îr
 :
z°d
.
	`NewRódî
(
byãs
.NewRódî(
d©a
))

78 
îr
 !
nû
 {

79  
sy°em
, 
îr


82 
de„r
 
zr
.
	`Clo£
()

84 
îr
 = 
gob
.
	`NewDecodî
(
zr
).
	`Decode
(&
sy°em
)

85 
îr
 !
nû
 {

86  
sy°em
, 
îr


89  
sy°em
, 
nû


90 
	}
}

92 
func
 
	$St‹eSy°emSaveD©a
(
uuid
 []
byã
, 
d©a
 
defs
.
Sy°emSaveD©a
Ë
îr‹
 {

93 
log
.
	`Pröén
("St‹eSy°emSaveD©®", 
uuid
, 
d©a
);

95 
buf
 :
	`√w
(
byãs
.
Buf„r
)

97 
zw
, 
îr
 :
z°d
.
	`NewWrôî
(
buf
)

98 
îr
 !
nû
 {

99  
îr


104 
îr
 = 
gob
.
	`NewEncodî
(
zw
).
	`Encode
(
d©a
)

105 
îr
 !
nû
 {

106 
log
.
	`Pröén
("Encodög Eº‹:", 
îr
)

107  
îr


110 
zw
.
	`Flush
()

111 
log
.
	`Pröén
("‚úÖ Data flushedÅo buffer!")

113 
îr
 = 
zw
.
	`Clo£
()

114 
îr
 !
nû
 {

115 
log
.
	`Pröén
("‚ùå FaûedÅÿ˛o£ ZSTD wrôî:", 
îr
)

117 
log
.
	`Pröén
("‚úÖ ZSTD writer closed successfully")

121 
log
.
	`Pröén
("Com¥es£d D©®Lígth:", 
	`Àn
(
buf
.
	`Byãs
()))

122 
log
.
	`Pröén
("Com¥es£d D©®C⁄ã¡:", 
buf
.
	`Byãs
())

123 
fmt
.
	`Pröén
("Origö D©a:", 
d©a
);

125 
_
, 
îr
 = 
h™dÀ
.
	`Exec
("REPLACE INTO sy°emSaveD©®(uuid, d©a,Åime°ampËVALUES (?, ?, UTC_TIMESTAMP())", 
uuid
, 
buf
.
	`Byãs
())

126 
îr
 !
nû
 {

127  
îr


130  
nû


131 
	}
}

133 
func
 
	$St‹eSy°emSaveD©aS3
(
uuid
 []
byã
, 
d©a
 
defs
.
Sy°emSaveD©a
Ë
îr‹
 {

134 
cfg
, 
_
 :
c⁄fig
.
	`LﬂdDeÁu…C⁄fig
(
c⁄ãxt
.
	`TODO
())

136 
˛õ¡
 :
s3
.
	`NewFromC⁄fig
(
cfg
, 
	`func
(
o
 *s3.
O±i⁄s
) {

137 
o
.
Ba£Endpoöt
 = 
aws
.
	`Såög
(
os
.
	`Gëív
("AWS_ENDPOINT_URL_S3"))

140 
u£∫ame
, 
îr
 :
	`FëchU£∫ameFromUUID
(
uuid
)

141 
îr
 !
nû
 {

142  
îr


145 
buf
 :
	`√w
(
byãs
.
Buf„r
)

147 
îr
 = 
js⁄
.
	`NewEncodî
(
buf
).
	`Encode
(
d©a
)

148 
îr
 !
nû
 {

149  
îr


152 
_
, 
îr
 = 
˛õ¡
.
	`PutObje˘
(
c⁄ãxt
.
	`Background
(), &
s3
.
PutObje˘I≈ut
{

153 
Buckë
: 
aws
.
	`Såög
(
os
.
	`Gëív
("S3_SYSTEM_BUCKET_NAME")),

154 
Key
: 
aws
.
	`Såög
(
u£∫ame
),

155 
Body
: 
buf
,

157 
îr
 !
nû
 {

158  
îr


161  
nû


162 
	}
}

164 
func
 
	$DñëeSy°emSaveD©a
(
uuid
 []
byã
Ë
îr‹
 {

165 
_
, 
îr
 :
h™dÀ
.
	`Exec
("DELETE FROM sy°emSaveD©®WHERE uuid = ?", 
uuid
)

166 
îr
 !
nû
 {

167  
îr


170  
nû


171 
	}
}

173 
func
 
	$RódSessi⁄SaveD©a
(
uuid
 []
byã
, 
¶Ÿ
 Ë(
defs
.
Sessi⁄SaveD©a
, 
îr‹
) {

174 
log
.
	`Pröén
("RódSessi⁄SaveD©a", 
uuid
, 
¶Ÿ
);

175 
v¨
 
£ssi⁄
 
defs
.
Sessi⁄SaveD©a


177 
v¨
 
d©a
 []
byã


178 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT d©®FROM sessi⁄SaveD©®WHERE uuid = ? AND slŸ = ?", 
uuid
, 
¶Ÿ
).
	`Sˇn
(&
d©a
)

179 
îr
 !
nû
 {

180  
£ssi⁄
, 
îr


183 
zr
, 
îr
 :
z°d
.
	`NewRódî
(
byãs
.NewRódî(
d©a
))

184 
îr
 !
nû
 {

185  
£ssi⁄
, 
îr


188 
de„r
 
zr
.
	`Clo£
()

190 
îr
 = 
gob
.
	`NewDecodî
(
zr
).
	`Decode
(&
£ssi⁄
)

191 
îr
 !
nû
 {

192  
£ssi⁄
, 
îr


195  
£ssi⁄
, 
nû


196 
	}
}

198 
func
 
	$GëL©e°Sessi⁄SaveD©aSlŸ
(
uuid
 []
byã
Ë(, 
îr‹
) {

199 
v¨
 
¶Ÿ
 

200 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECT slŸ FROM sessi⁄SaveD©®WHERE uuid = ? ORDER BYÅime°am∞DESC, slŸ ASC LIMIT 1", 
uuid
).
	`Sˇn
(&
¶Ÿ
)

201 
îr
 !
nû
 {

202  -1, 
îr


205  
¶Ÿ
, 
nû


206 
	}
}

208 
func
 
	$St‹eSessi⁄SaveD©a
(
uuid
 []
byã
, 
d©a
 
defs
.
Sessi⁄SaveD©a
, 
¶Ÿ
 Ë
îr‹
 {

209 
log
.
	`Pröén
("St‹eSessi⁄SaveD©a", 
uuid
, 
d©a
, 
¶Ÿ
);

210 
buf
 :
	`√w
(
byãs
.
Buf„r
)

212 
zw
, 
îr
 :
z°d
.
	`NewWrôî
(
buf
)

213 
îr
 !
nû
 {

214  
îr


219 
îr
 = 
gob
.
	`NewEncodî
(
zw
).
	`Encode
(
d©a
)

220 
îr
 !
nû
 {

221  
îr


224 
zw
.
	`Clo£
();

226 
_
, 
îr
 = 
h™dÀ
.
	`Exec
("REPLACE INTO sessi⁄SaveD©®(uuid, slŸ, d©a,Åime°ampËVALUES (?, ?, ?, UTC_TIMESTAMP())", 
uuid
, 
¶Ÿ
, 
buf
.
	`Byãs
())

227 
îr
 !
nû
 {

228  
îr


231  
nû


232 
	}
}

234 
func
 
	$DñëeSessi⁄SaveD©a
(
uuid
 []
byã
, 
¶Ÿ
 Ë
îr‹
 {

235 
_
, 
îr
 :
h™dÀ
.
	`Exec
("DELETE FROM sessi⁄SaveD©®WHERE uuid = ? AND slŸ = ?", 
uuid
, 
¶Ÿ
)

236 
îr
 !
nû
 {

237  
îr


240  
nû


241 
	}
}

243 
func
 
	$RërõvePœytime
(
uuid
 []
byã
Ë(, 
îr‹
) {

244 
v¨
 
∂aytime
 

245 
îr
 :
h™dÀ
.
	`QuîyRow
("SELECTÖœyTimêFROMáccou¡Sèt†WHERE uuid = ?", 
uuid
).
	`Sˇn
(&
∂aytime
)

246 
îr
 !
nû
 {

247  0, 
îr


250  
∂aytime
, 
nû


251 
	}
}

253 
func
 
	$GëSy°emSaveFromS3
(
uuid
 []
byã
Ë(
defs
.
Sy°emSaveD©a
, 
îr‹
) {

254 
v¨
 
sy°em
 
defs
.
Sy°emSaveD©a


256 
u£∫ame
, 
îr
 :
	`FëchU£∫ameFromUUID
(
uuid
)

257 
îr
 !
nû
 {

258  
sy°em
, 
îr


261 
cfg
, 
îr
 :
c⁄fig
.
	`LﬂdDeÁu…C⁄fig
(
c⁄ãxt
.
	`TODO
())

262 
îr
 !
nû
 {

263  
sy°em
, 
îr


266 
˛õ¡
 :
s3
.
	`NewFromC⁄fig
(
cfg
)

268 
s3Obje˘
 :
s3
.
GëObje˘I≈ut
{

269 
Buckë
: 
aws
.
	`Såög
(
os
.
	`Gëív
("S3_SYSTEM_BUCKET_NAME")),

270 
Key
: 
aws
.
	`Såög
(
u£∫ame
),

273 
ª•
, 
îr
 :
˛õ¡
.
	`GëObje˘
(
c⁄ãxt
.
	`TODO
(), &
s3Obje˘
)

274 
îr
 !
nû
 {

275  
sy°em
, 
îr


278 
îr
 = 
js⁄
.
	`NewDecodî
(
ª•
.
Body
).
	`Decode
(&
sy°em
)

279 
îr
 !
nû
 {

280  
sy°em
, 
îr


283  
sy°em
, 
nû


284 
	}
}

	@defs/daily.go

18 
∑ckage
 
defs


20 
ty≥
 
DaûyR™kög
 struct {

21 
R™k
 `
	mjs⁄
:"rank"`

22 
U£∫ame
 
°rög
 `
js⁄
:"username"`

23 
Sc‹e
 `
js⁄
:"score"`

24 
Wave
 `
js⁄
:"wave"`

	@defs/game.go

18 
∑ckage
 
defs


20 
ty≥
 
TôÀSèts
 struct {

21 
PœyîCou¡
 `
	mjs⁄
:"playerCount"`

22 
B©éeCou¡
 `
js⁄
:"battleCount"`

	@defs/savedata.go

18 
∑ckage
 
defs


20 c⁄° 
	gSessi⁄SlŸCou¡
 = 5

22 
ty≥
 
Sy°emSaveD©a
 struct {

23 
TøöîId
 `
js⁄
:"trainerId"`

24 
Se¸ëId
 `
js⁄
:"secretId"`

25 
Gídî
 `
js⁄
:"gender"`

26 
DexD©a
 DexD©®`
js⁄
:"dexData"`

27 
SèπîD©a
 SèπîD©®`
js⁄
:"starterData"`

28 
SèπîMoveD©a
 SèπîMoveD©®`
js⁄
:"starterMoveData"`

29 
SèπîEggMoveD©a
 SèπîEggMoveD©®`
js⁄
:"starterEggMoveData"`

30 
GameSèts
 GameSèt†`
js⁄
:"gameStats"`

31 
U∆ocks
 U∆ock†`
js⁄
:"unlocks"`

32 
AchvU∆ocks
 AchvU∆ock†`
js⁄
:"achvUnlocks"`

33 
VouchîU∆ocks
 VouchîU∆ock†`
js⁄
:"voucherUnlocks"`

34 
VouchîCou¡s
 VouchîCou¡†`
js⁄
:"voucherCounts"`

35 
Eggs
 []
EggD©a
 `
js⁄
:"eggs"`

36 
EggPôy
 []`
js⁄
:"eggPity"`

37 
U∆ockPôy
 []`
js⁄
:"unlockPity"`

38 
GameVîsi⁄
 
°rög
 `
js⁄
:"gameVersion"`

39 
Time°amp
 `
js⁄
:"timestamp"`

42 
ty≥
 
DexD©a
 
m≠
[]
DexE¡ry


44 
ty≥
 
DexE¡ry
 struct {

45 
SìnAâr
 
öãrÁ˚
{} `
js⁄
:"seenAttr"`

46 
CaughtAâr
 
öãrÁ˚
{} `
js⁄
:"caughtAttr"`

47 
N©uªAâr
 `
js⁄
:"natureAttr"`

48 
SìnCou¡
 `
js⁄
:"seenCount"`

49 
CaughtCou¡
 `
js⁄
:"caughtCount"`

50 
H©chedCou¡
 `
js⁄
:"hatchedCount"`

51 
Ivs
 []`
js⁄
:"ivs"`

54 
ty≥
 
SèπîD©a
 
m≠
[]
SèπîE¡ry


56 
ty≥
 
SèπîE¡ry
 struct {

57 
Move£t
 
öãrÁ˚
{} `
js⁄
:"moveset"`

58 
EggMoves
 `
js⁄
:"eggMoves"`

59 
C™dyCou¡
 `
js⁄
:"candyCount"`

60 
Frõndshù
 `
js⁄
:"friendship"`

61 
AbûôyAâr
 `
js⁄
:"abilityAttr"`

62 
PassiveAâr
 `
js⁄
:"passiveAttr"`

63 
VÆueRedu˘i⁄
 `
js⁄
:"valueReduction"`

64 
CœssicWöCou¡
 `
js⁄
:"classicWinCount"`

67 
ty≥
 
SèπîMoveD©a
 
m≠
[]
öãrÁ˚
{}

69 
ty≥
 
SèπîEggMoveD©a
 
m≠
[]

71 
ty≥
 
GameSèts
 
öãrÁ˚
{}

73 
ty≥
 
U∆ocks
 
m≠
[]
boﬁ


75 
ty≥
 
AchvU∆ocks
 
m≠
[
°rög
]

77 
ty≥
 
VouchîU∆ocks
 
m≠
[
°rög
]

79 
ty≥
 
VouchîCou¡s
 
m≠
[
°rög
]

81 
ty≥
 
EggD©a
 struct {

82 
Id
 `
js⁄
:"id"`

83 
GachaTy≥
 GachaTy≥ `
js⁄
:"gachaType"`

84 
H©chWaves
 `
js⁄
:"hatchWaves"`

85 
Time°amp
 `
js⁄
:"timestamp"`

86 
Tõr
 `
js⁄
:"tier"`

87 
Sour˚Ty≥
 `
js⁄
:"sourceType"`

88 
V¨ü¡Tõr
 `
js⁄
:"variantTier"`

89 
IsShöy
 
boﬁ
 `
js⁄
:"isShiny"`

90 
S≥cõs
 `
js⁄
:"species"`

91 
EggMoveIndex
 `
js⁄
:"eggMoveIndex"`

92 
OvîrideHiddíAbûôy
 
boﬁ
 `
js⁄
:"overrideHiddenAbility"`

95 
ty≥
 
GachaTy≥
 

97 
ty≥
 
Sessi⁄SaveD©a
 struct {

98 
Sìd
 
°rög
 `
js⁄
:"seed"`

99 
PœyTime
 `
js⁄
:"playTime"`

100 
GameMode
 GameModê`
js⁄
:"gameMode"`

101 
P¨ty
 []
Pokem⁄D©a
 `
js⁄
:"party"`

102 
E√myP¨ty
 []
Pokem⁄D©a
 `
js⁄
:"enemyParty"`

103 
Modifõrs
 []
Pîsi°ítModifõrD©a
 `
js⁄
:"modifiers"`

104 
E√myModifõrs
 []
Pîsi°ítModifõrD©a
 `
js⁄
:"enemyModifiers"`

105 
Aª«
 
Aª«D©a
 `
js⁄
:"arena"`

106 
PokebÆlCou¡s
 PokebÆlCou¡†`
js⁄
:"pokeballCounts"`

107 
M⁄ey
 `
js⁄
:"money"`

108 
Sc‹e
 `
js⁄
:"score"`

109 
Vi˘‹yCou¡
 `
js⁄
:"victoryCount"`

110 
FaötCou¡
 `
js⁄
:"faintCount"`

111 
ReviveCou¡
 `
js⁄
:"reviveCount"`

112 
WaveIndex
 `
js⁄
:"waveIndex"`

113 
B©éeTy≥
 B©éeTy≥ `
js⁄
:"battleType"`

114 
Tøöî
 
TøöîD©a
 `
js⁄
:"trainer"`

115 
GameVîsi⁄
 
°rög
 `
js⁄
:"gameVersion"`

116 
Time°amp
 `
js⁄
:"timestamp"`

117 
ChÆÀnges
 []
ChÆÀngeD©a
 `
js⁄
:"challenges"`

118 
My°îyEncou¡îTy≥
 My°îyEncou¡îTy≥ `
js⁄
:"mysteryEncounterType"`

119 
My°îyEncou¡îSaveD©a
 My°îyEncou¡îSaveD©®`
js⁄
:"mysteryEncounterSaveData"`

122 
ty≥
 
ChÆÀngeD©a
 struct {

123 
Id
 `
js⁄
:"id"`

124 
VÆue
 `
js⁄
:"value"`

125 
Sevîôy
 `
js⁄
:"severity"`

128 
ty≥
 
My°îyEncou¡îTy≥
 

130 
ty≥
 
My°îyEncou¡îTõr
 

132 
ty≥
 
SìnEncou¡îD©a
 struct {

133 
Ty≥
 
My°îyEncou¡îTy≥
 `
js⁄
:"type"`

134 
Tõr
 
My°îyEncou¡îTõr
 `
js⁄
:"tier"`

135 
WaveIndex
 `
js⁄
:"waveIndex"`

136 
Sñe˘edO±i⁄
 `
js⁄
:"selectedOption"`

139 
ty≥
 
QueuedEncou¡î
 struct {

140 
Ty≥
 
My°îyEncou¡îTy≥
 `
js⁄
:"type"`

141 
S∑wnPî˚¡
 `
js⁄
:"spawnPercent"`

144 
ty≥
 
My°îyEncou¡îSaveD©a
 struct {

145 
Encou¡îedEvíts
 []
SìnEncou¡îD©a
 `
js⁄
:"encounteredEvents"`

146 
Encou¡îS∑wnCh™˚
 `
js⁄
:"encounterSpawnChance"`

147 
QueuedEncou¡îs
 []
QueuedEncou¡î
 `
js⁄
:"queuedEncounters"`

150 
ty≥
 
GameMode
 

152 
ty≥
 
Pokem⁄D©a
 
öãrÁ˚
{}

154 
ty≥
 
Pîsi°ítModifõrD©a
 
öãrÁ˚
{}

156 
ty≥
 
Aª«D©a
 
öãrÁ˚
{}

158 
ty≥
 
PokebÆlCou¡s
 
m≠
[
°rög
]

160 
ty≥
 
B©éeTy≥
 

162 
ty≥
 
TøöîD©a
 
öãrÁ˚
{}

164 
ty≥
 
Sessi⁄Hi°‹yD©a
 struct {

165 
Sìd
 
°rög
 `
js⁄
:"seed"`

166 
PœyTime
 `
js⁄
:"playTime"`

167 
Resu…
 
Sessi⁄Hi°‹yResu…
 `
js⁄
:"sessionHistoryResult"`

168 
GameMode
 GameModê`
js⁄
:"gameMode"`

169 
P¨ty
 []
Pokem⁄D©a
 `
js⁄
:"party"`

170 
Modifõrs
 []
Pîsi°ítModifõrD©a
 `
js⁄
:"modifiers"`

171 
M⁄ey
 `
js⁄
:"money"`

172 
Sc‹e
 `
js⁄
:"score"`

173 
WaveIndex
 `
js⁄
:"waveIndex"`

174 
B©éeTy≥
 B©éeTy≥ `
js⁄
:"battleType"`

175 
GameVîsi⁄
 
°rög
 `
js⁄
:"gameVersion"`

176 
Time°amp
 `
js⁄
:"timestamp"`

179 
ty≥
 
Sessi⁄Hi°‹yResu…
 

	@redis_ping.go

5 
∑ckage
 
maö


7 
imp‹t
 (

17 
func
 
	$mu°
(
îr
 
îr‹
) {

18 
îr
 !
nû
 {

19 
	`∑nic
(
îr
)

21 
	}
}

23 
func
 
	$maö
() {

24 
˘x
 :
c⁄ãxt
.
	`Background
()

27 
addr
 :
os
.
	`Gëív
("REDIS_ADDR")

28 
∑ss
 :
os
.
	`Gëív
("REDIS_PASS")

29 
dbNum
 := 0

30 
s
 :
os
.
	`Gëív
("REDIS_DB"); s != "" {

31 
n
, 
_
 :
°rc⁄v
.
	`Atoi
(
s
)

32 
dbNum
 = 
n


36 
rdb
 :
ªdis
.
	`NewClõ¡
(&ªdis.
O±i⁄s
{

37 
Addr
: 
addr
,

38 
Passw‹d
: 
∑ss
,

39 
DB
: 
dbNum
,

41 
	`mu°
(
rdb
.
	`Pög
(
˘x
).
	`Eº
())

42 
fmt
.
	`Prötf
("‚úÖ Redi†PING OK (%s)\n", 
addr
)

45 
key
 := "test-key"

46 
vÆ
 :
fmt
.
	`S¥ötf
("time-%d", 
time
.
	`Now
().
	`Unix
())

48 
	`mu°
(
rdb
.
	`Së
(
˘x
, 
key
, 
vÆ
, 
time
.
Möuã
).
	`Eº
())

49 
gŸ
, 
îr
 :
rdb
.
	`Gë
(
˘x
, 
key
).
	`Resu…
()

50 
	`mu°
(
îr
)

52 
gŸ
 =
vÆ
 {

53 
fmt
.
	`Prötf
("üéâ SET/GET ÏÑ±Í≥µ: %†%s\n", 
key
, 
gŸ
)

55 
fmt
.
	`Prötf
("‚ö†Ô∏è Í∞í Î∂àÏùºÏπò! Í∏∞ÎåÄ: %s, Ïã§Ï†ú: %s\n", 
vÆ
, 
gŸ
)

57 
	}
}

	@rogueserver.go

18 
∑ckage
 
maö


20 
imp‹t
 (

35 
func
 
	$maö
() {

37 
debug
, 
_
 :
°rc⁄v
.
	`P¨£Boﬁ
(
os
.
	`Gëív
("debug"))

39 
¥Ÿo
 :
	`gëEnv
("proto", "tcp")

40 
addr
 :
	`gëEnv
("addr", "0.0.0.0:8001")

41 
és˚π
 :
	`gëEnv
("tlscert", "")

42 
éskey
 :
	`gëEnv
("tlskey", "")

44 
dbu£r
 :
	`gëEnv
("dbuser", "pokerogue")

45 
db∑ss
 :
	`gëEnv
("dbpass", "pokerogue")

46 
db¥Ÿo
 :
	`gëEnv
("dbproto", "tcp")

47 
dbaddr
 :
	`gëEnv
("dbaddr", "localhost")

48 
db«me
 :
	`gëEnv
("dbname", "pokeroguedb")

50 
disc‹d˛õ¡id
 :
	`gëEnv
("discordclientid", "")

51 
disc‹d£¸ëid
 :
	`gëEnv
("discordsecretid", "")

53 
googÀ˛õ¡id
 :
	`gëEnv
("googleclientid", "")

54 
googÀ£¸ëid
 :
	`gëEnv
("googlesecretid", "")

56 
ˇŒbackuæ
 :
	`gëEnv
("callbackurl", "http://localhost:8001/")

58 
gameuæ
 :
	`gëEnv
("gameurl", "https://pokerogue.net")

60 
disc‹dbŸtokí
 :
	`gëEnv
("discordbottoken", "")

61 
disc‹dguûdid
 :
	`gëEnv
("discordguildid", "")

63 
accou¡
.
GameURL
 = 
gameuæ


65 
accou¡
.
Disc‹dClõ¡ID
 = 
disc‹d˛õ¡id


66 
accou¡
.
Disc‹dClõ¡Se¸ë
 = 
disc‹d£¸ëid


67 
accou¡
.
Disc‹dCÆlbackURL
 = 
ˇŒbackuæ
 + "/auth/discord/callback"

69 
accou¡
.
GoogÀClõ¡ID
 = 
googÀ˛õ¡id


70 
accou¡
.
GoogÀClõ¡Se¸ë
 = 
googÀ£¸ëid


71 
accou¡
.
GoogÀCÆlbackURL
 = 
ˇŒbackuæ
 + "/auth/google/callback"

72 
accou¡
.
Disc‹dSessi⁄
, 
_
 = 
disc‹dgo
.
	`New
("BŸ " + 
disc‹dbŸtokí
)

73 
accou¡
.
Disc‹dGuûdID
 = 
disc‹dguûdid


76 
gob
.
	`Regi°î
([]
öãrÁ˚
{}{})

77 
gob
.
	`Regi°î
(
m≠
[
°rög
]
öãrÁ˚
{}{})

80 
îr
 :
ˇche
.
	`Inô
();Éº !
nû
 {

81 
log
.
	`F©Æf
("ÁûedÅÿc⁄√˘Ñedis: %v", 
îr
)

83 
log
.
	`Pröén
("Redis connected")

86 
îr
 :
db
.
	`Inô
(
dbu£r
, 
db∑ss
, 
db¥Ÿo
, 
dbaddr
, 
db«me
)

87 
îr
 !
nû
 {

88 
log
.
	`F©Æf
("ÁûedÅÿöôülizêd©aba£: %s", 
îr
)

92 
li°íî
, 
îr
 :
	`¸óãLi°íî
(
¥Ÿo
, 
addr
)

93 
îr
 !
nû
 {

94 
log
.
	`F©Æf
("ÁûedÅÿ¸óãÇëÜi°íî: %s", 
îr
)

97 
mux
 :
hâp
.
	`NewSîveMux
()

100 
îr
 :
≠i
.
	`Inô
(
mux
);Éº !
nû
 {

101 
log
.
	`F©Æ
(
îr
)

105 
h™dÀr
 :
	`¥odH™dÀr
(
mux
, 
gameuæ
)

106 
debug
 {

107 
h™dÀr
 = 
	`debugH™dÀr
(
mux
)

110 
és˚π
 == "" {

111 
îr
 = 
hâp
.
	`Sîve
(
li°íî
, 
h™dÀr
)

113 
îr
 = 
hâp
.
	`SîveTLS
(
li°íî
, 
h™dÀr
, 
és˚π
, 
éskey
)

115 
îr
 !
nû
 {

116 
log
.
	`F©Æf
("ÁûedÅÿ¸óã hâ∞£rvî o∏£rvîÉº‹ed: %s", 
îr
)

118 
	}
}

120 
func
 
	$¸óãLi°íî
(
¥Ÿo
, 
addr
 
°rög
Ë(
√t
.
Li°íî
, 
îr‹
) {

121 
¥Ÿo
 == "unix" {

122 
os
.
	`Remove
(
addr
)

125 
li°íî
, 
îr
 :
√t
.
	`Li°í
(
¥Ÿo
, 
addr
)

126 
îr
 !
nû
 {

127  
nû
, 
îr


130 
¥Ÿo
 == "unix" {

131 
îr
 :
os
.
	`Chmod
(
addr
, 0777);Éº !
nû
 {

132 
li°íî
.
	`Clo£
()

133  
nû
, 
îr


137  
li°íî
, 
nû


138 
	}
}

140 
func
 
	$¥odH™dÀr
(
rouãr
 *
hâp
.
SîveMux
, 
˛õ¡uæ
 
°rög
Ëhâp.
H™dÀr
 {

141  
hâp
.
	`H™dÀrFunc
(
	`func
(
w
 hâp.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

142 
w
.
	`Hódî
().
	`Së
("Access-Control-Allow-Headers", "Authorization, Content-Type")

143 
w
.
	`Hódî
().
	`Së
("Access-Control-Allow-Methods", "OPTIONS, GET, POST")

144 
w
.
	`Hódî
().
	`Së
("Ac˚ss-C⁄åﬁ-AŒow-Origö", 
˛õ¡uæ
)

146 
r
.
Mëhod
 == "OPTIONS" {

147 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

151 
rouãr
.
	`SîveHTTP
(
w
, 
r
)

153 
	}
}

155 
func
 
	$debugH™dÀr
(
rouãr
 *
hâp
.
SîveMux
Ëhâp.
H™dÀr
 {

156  
hâp
.
	`H™dÀrFunc
(
	`func
(
w
 hâp.
Re•⁄£Wrôî
, 
r
 *hâp.
Reque°
) {

157 
w
.
	`Hódî
().
	`Së
("Access-Control-Allow-Headers", "*")

158 
w
.
	`Hódî
().
	`Së
("Access-Control-Allow-Methods", "*")

159 
w
.
	`Hódî
().
	`Së
("Access-Control-Allow-Origin", "*")

161 
r
.
Mëhod
 == "OPTIONS" {

162 
w
.
	`WrôeHódî
(
hâp
.
SètusOK
)

166 
rouãr
.
	`SîveHTTP
(
w
, 
r
)

168 
	}
}

170 
func
 
	$gëEnv
(
key
 
°rög
, 
deÁu…VÆue
 string) string {

171 
vÆue
, 
ok
 :
os
.
	`LookupEnv
(
key
); ok {

172  
vÆue


175  
deÁu…VÆue


176 
	}
}

	@
1
.
1
/usr/include
32
612
api/account/changepw.go
api/account/common.go
api/account/discord.go
api/account/google.go
api/account/info.go
api/account/login.go
api/account/logout.go
api/account/register.go
api/common.go
api/daily/common.go
api/daily/rankings.go
api/daily/rankingspagecount.go
api/endpoints.go
api/savedata/clear.go
api/savedata/common.go
api/savedata/delete.go
api/savedata/newclear.go
api/savedata/session.go
api/savedata/system.go
api/savedata/update.go
api/stats.go
cache/rediscache.go
db/account.go
db/daily.go
db/db.go
db/game.go
db/savedata.go
defs/daily.go
defs/game.go
defs/savedata.go
redis_ping.go
rogueserver.go
